<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MREUnityRuntimeLib</name>
    </assembly>
    <members>
        <member name="F:MixedRealityExtension.Animation.Animation.StopUpdating">
            <summary>
            When an animation is stopping (by weight == 0 || speed == 0), this flag indicates
            we should update one last time before stopping
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Animation.LastKeyframeIndex">
            <summary>
            The index of the keyframe used last update
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Animation.ImplicitStartKeyframes">
            <summary>
            Reference frames for non-zero start animations. Indexed by track index
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Animation.ResolvedRelativeKeyframes">
            <summary>
            Absolute values of relative keyframes. Indexed by track index, then keyframe index
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Animation.ResolvedTargetPaths">
            <summary>
            Keyframe target paths, with placeholders swapped for GUIDs. Used for blending output with other anims
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Animation.LastWeight">
            <summary>
            Animation weight that lags behind by one frame. Used for "one more update" calculation.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.AnimationDataCached">
            <summary>
            Keyframe data for an animation (cacheable version)
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.AnimationDataCached.Tracks">
            <summary>
            The animation keyframe data
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.AnimationData">
            <summary>
            Keyframe data for an animation
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.AnimationData.Tracks">
            <summary>
            The animation keyframe data
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.Track">
            <summary>
            The timeline of values for an animation target property
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Track.Target">
            <summary>
            A path to the property to animate
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Track.Keyframes">
            <summary>
            The values to animate the target through
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Track.Relative">
            <summary>
            Whether the keyframe values are relative to 0 or to the target's current property value. Defaults to false.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Track.Easing">
            <summary>
            Controls between-frame interpolation. If not provided, frames will not interpolate.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Animation.Track.Bezier">
            <summary>
            The cubic bezier computer for the track's easing function
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.Keyframe">
            <summary>
            The value of an animation property at a moment in time
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Keyframe.Time">
            <summary>
            The time in seconds from the start of the animation.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Keyframe.Value">
            <summary>
            The property's value at this instant, or a reference to another property.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.Keyframe.Easing">
            <summary>
            How the value approaches this frame's value. Defaults to linear (0, 0, 1, 1).
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Animation.Keyframe.Bezier">
            <summary>
            The cubic bezier computer for the frame's easing function
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.MWAnimationEvent">
            <summary>
            Animation Event
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationEvent.Name">
            <summary>
            The animation event name
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationEvent.Value">
            <summary>
            The animation event value
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationEvent.Time">
            <summary>
            The time offset (in seconds) when the animation event should be raised
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.MWAnimationKeyframe">
            <summary>
            Animation Keyframe
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationKeyframe.Time">
            <summary>
            The time offset (in seconds) from the start of the animation when this keyframe should be applied
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationKeyframe.Value">
            <summary>
            The value of this keyframe
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.MWActorAnimationState">
            <summary>
            Class that represents the state of an animation.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWActorAnimationState.ActorId">
            <summary>
            The id of the actor of the animation.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWActorAnimationState.AnimationName">
            <summary>
            The name of the animation.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWActorAnimationState.State">
            <summary>
            All the state options.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.MWAnimationWrapMode">
            <summary>
            Animation Wrap Mode
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationWrapMode.Once">
            <summary>
            At the end of the animation, stop playing and reset time to zero.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationWrapMode.Loop">
            <summary>
            At the end of the animation, restart at the beginning.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Animation.MWAnimationWrapMode.PingPong">
            <summary>
            At the end of the animation, run the animation backward to the beginning, and vice versa.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Animation.MWAnimationWrapModeExtensions">
            <summary>
            Extension methods for MWAnimationWrapMode enumeration.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Animation.MWAnimationWrapModeExtensions.IsLooping(MixedRealityExtension.Animation.MWAnimationWrapMode)">
            <summary>
            Returns true if the mode is a looping mode.
            </summary>
            <param name="wrapMode"></param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Animation.JTokenPool.Lease(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Produce a JToken of the requested shape
            </summary>
            <param name="matchingType">The produced token will have the same fields as this token</param>
            <returns></returns>
        </member>
        <member name="T:MixedRealityExtension.Animation.MWSetAnimationStateOptions">
            Parameters to the `actor.setAnimationState` call. All values are optional. Only supplied value will be applied.
        </member>
        <member name="P:MixedRealityExtension.Animation.MWSetAnimationStateOptions.Time">
            The current animation time (in seconds).
        </member>
        <member name="P:MixedRealityExtension.Animation.MWSetAnimationStateOptions.Speed">
            The speed of animation playback. Negative values go backward. Zero is stopped. Animations stopped this way still
            influence the actor transform according to their weight. To remove this animation's influence, set its weight to
            zero using the `actor.setAnimationState` call, or disable it using the `actor.disableAnimation` call.
        </member>
        <member name="P:MixedRealityExtension.Animation.MWSetAnimationStateOptions.Enabled">
            Whether or not to enable this animation.
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetCache">
            <summary>
            Default in-memory implementation of the asset cache interface
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetCache.CleanInterval">
            <summary>
            The maximum time (in seconds) dereferenced assets are allowed to stay in memory.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetCache.CacheRootGO">
            <inheritdoc/>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetCache.SupportsSync">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.AcquireLoadingLock(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.ReleaseLoadingLock(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.StoreAssets(System.Uri,System.Collections.Generic.IEnumerable{UnityEngine.Object},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.LeaseAssets(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.LeaseAssetsSync(System.Uri,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.TryGetVersion(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.TryGetVersionSync(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetCache.CleanUnusedResources">
            <summary>
            Deallocates any cache items that have zero references.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetLoadThrottling">
            <summary>
            Global asset load web request throttler.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.PrefabAnimationTargets">
            <summary>
            Stores animation clip targets as lists of transform tree positions
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.PrefabAnimationTargets.AnimationTargets">
            <summary>
            The list of animation target maps. Each map is a list of indices into the parent-first transform node expansions.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Assets.PrefabAnimationTargets.Initialize(GLTF.Schema.GLTFRoot,System.Int32)">
            <summary>
            Populate the animation target maps from a glTF document.
            </summary>
            <param name="root">The parsed glTF document this prefab was created from</param>
            <param name="sceneIndex">Which scene in the glTF this prefab is based on</param>
        </member>
        <member name="M:MixedRealityExtension.Assets.PrefabAnimationTargets.GetTargets(UnityEngine.Transform,System.Int32,System.Boolean)">
            <summary>
            Compare the prefab transform hierarchy with the real transform hierarchy, and grab the real actor references.
            </summary>
            <param name="root">The instantiated prefab root transform.</param>
            <param name="animationIndex">The map index that you want the targets of.</param>
            <param name="addRootToTargets">Should the root actor be included in targets?</param>
            <returns></returns>
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetManager">
            <summary>
            Keep track of all ready-to-use assets in this MRE instance
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetManager.AssetMetadata">
            <summary>
            Stores all the necessary info about an asset, including where it came from. Source will be null if this
            is not a shared asset, i.e. is a one-off creation of an MRE, or is a modified copy of something from
            the asset cache.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.Assets.AssetManager.AssetReferenceChanged">
            <summary>
            Fired when a stored asset is substituted for a write-safe duplicate.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.CacheRootGO">
            <summary>
            The game object in the scene hierarchy that should be used as parent for any assets that require one,
            i.e. Prefabs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.EmptyTemplate">
            <summary>
            The game object that should be duplicated for new actors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.GetById(System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Retrieve an asset by ID
            </summary>
            <param name="id">The ID of the asset to look up</param>
            <param name="writeSafe">If true, and the stored asset with that ID is shared,
            a copy of the asset will be made, and stored back into the manager. Any other shared assets that reference
            this asset will also be recursively copied and stored back. Each copied asset will have the original
            returned to the cache, decrementing the original's reference count.</param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.GetByObject(UnityEngine.Object)">
            <summary>
            Retrieve an asset's metadata from the asset reference itself.
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.OnSet(System.Guid,System.Action{MixedRealityExtension.Assets.AssetManager.AssetMetadata})">
            <summary>
            Be notified when an asset is finished loading and available for use.
            </summary>
            <param name="id"></param>
            <param name="callback"></param>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.Set(System.Guid,System.Guid,UnityEngine.Object,MixedRealityExtension.Core.ColliderGeometry,MixedRealityExtension.Assets.AssetSource)">
            <summary>
            Track a new asset reference. Will be called during asset creation, after the asset content is downloaded
            or retrieved from cache.
            </summary>
            <param name="id"></param>
            <param name="containerId"></param>
            <param name="asset"></param>
            <param name="colliderGeo"></param>
            <param name="source"></param>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.Unload(System.Guid)">
            <summary>
            Break references to all shared assets and destroy all unshared assets with this container ID.
            </summary>
            <param name="containerId"></param>
        </member>
        <member name="M:MixedRealityExtension.Assets.AssetManager.MakeWriteSafe(MixedRealityExtension.Assets.AssetManager.AssetMetadata,System.Nullable{MixedRealityExtension.Assets.AssetManager.AssetMetadata},System.Nullable{MixedRealityExtension.Assets.AssetManager.AssetMetadata})">
            <summary>
            Recursively copy shared assets from cache into manager so the app can modify them.
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetGroup">
            <summary>
            Contains the assets loaded from a particular container.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AssetGroup.Source">
            <summary>
            The origin of these assets.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AssetGroup.Assets">
            <summary>
            The loaded assets.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetSource">
            <summary>
            Documents the origin of an asset.
            NOTE: The InternalId is not used for equality testing.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetSource.ContainerType">
            <summary>
            The type of container the asset came from.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetSource.Uri">
            <summary>
            The URL of the asset's container.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetSource.Version">
            <summary>
            The version of the resource at the Uri that this asset came from. Will typically be an HTTP ETag.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetSource.ParsedUri">
            <summary>
            The parsed URI of the asset's container.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Assets.AssetSource.InternalId">
            <summary>
            The location of the asset within the container. Type-dependent.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.Asset">
            <summary>
            An asset definition for Node use
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Id">
            <summary>
            The unique ID of this asset.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Name">
            <summary>
            A human-friendly identifier for this asset. Not guaranteed to be unique.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Source">
            <summary>
            Documents the origin of this asset
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Prefab">
            <summary>
            If this asset is a prefab, contains those properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Material">
            <summary>
            If this asset is a material, contains those properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Texture">
            <summary>
            If this asset is a texture, contains those properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Mesh">
            <summary>
            If this asset is a mesh, contains those properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.Sound">
            <summary>
            If this asset is a sound, contains those properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.VideoStream">
            <summary>
            If this asset is a video, contains those properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Asset.AnimationData">
            <summary>
            Only populated when this asset is animation data. An asset will only have one of these types specified.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.AssetContainerType">
            <summary>
            Types of asset containers
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AssetContainerType.None">
            <summary>
            This asset was loaded on its own, and not from a container.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AssetContainerType.GLTF">
            <summary>
            Loaded from a glTF file.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AssetContainerType.Library">
            <summary>
            Loaded from a host library.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.Prefab">
            <summary>
            Contains prefab asset information.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Prefab.ActorCount">
            <summary>
            The number of actors described in this prefab.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.AlphaMode">
            <summary>
            How a material's alpha channel should be used
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AlphaMode.Opaque">
            <summary>
            Draw opaque regardless of alpha
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AlphaMode.Mask">
            <summary>
            Draw opaque, unless alpha drops below the specified cutoff
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.AlphaMode.Blend">
            <summary>
            Blend with the background by the factor of alpha
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.Material">
            <summary>
            Contains material asset info
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.Color">
            <summary>
            The main color of the material
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.MainTextureId">
            <summary>
            The ID of the main texture asset
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.MainTextureOffset">
            <summary>
            Offset the texture by this amount as a fraction of the resolution
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.MainTextureScale">
            <summary>
            Scale the texture by this amount in each axis
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.EmissiveColor">
            <summary>
            The lighting-independent color
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.EmissiveTextureId">
            <summary>
            The ID of the main texture asset
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.EmissiveTextureOffset">
            <summary>
            Offset the texture by this amount as a fraction of the resolution
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.EmissiveTextureScale">
            <summary>
            Scale the texture by this amount in each axis
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.AlphaMode">
            <summary>
            How this material should treat the color/texture alpha channel
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Material.AlphaCutoff">
            <summary>
            If AlphaMode is TransparentCutout, this is the transparency threshold
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.Texture">
            <summary>
            Contains a basic texture description
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Texture.Uri">
            <summary>
            The URI of the source data for this texture
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Texture.Resolution">
            <summary>
            The resolution of the texture
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Texture.WrapModeU">
            <summary>
            How out-of-range U coordinates should be handled
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Texture.WrapModeV">
            <summary>
            How out-of-range V coordinates should be handled
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.Mesh">
            <summary>
            Contains a basic mesh description
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Mesh.VertexCount">
            <summary>
            The number of vertices in this mesh
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Mesh.TriangleCount">
            <summary>
            The number of triangles in this mesh
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Mesh.BoundingBoxDimensions">
            <summary>
            The size of the mesh's axis-aligned bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Mesh.BoundingBoxCenter">
            <summary>
            The center of the mesh's axis-aligned bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Mesh.PrimitiveDefinition">
            <summary>
            If this mesh is a primitive, the primitive's description
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.Sound">
            <summary>
            Contains a basic sound description
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Sound.Uri">
            <summary>
            The URI of the source data for this texture
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.Sound.Duration">
            <summary>
            Duration in seconds.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Assets.VideoStream">
            <summary>
            Contains a basic video stream description
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.VideoStream.Uri">
            <summary>
            The specific URI for the video stream
            This can be either Youtube://xxx, Mixer://xxx, Twitch://xxx or a regular URL
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Assets.VideoStream.Duration">
            <summary>
            Duration in seconds.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.ActionData.BaseActionData">
            <summary>
            Abstract class that represents the base class for action data.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.ActionData.BaseToolData">
            <summary>
            Abstract class that is the base class for any tool behavior action data.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Behaviors.ActionData.BaseToolData.IsEmpty">
            <summary>
            Gets whether the tool data is empty and shouldn't be synchronized.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.ActionData.BaseToolData.Reset">
            <summary>
            Reset the action data to a initial state.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.ActionData.DrawData">
            <summary>
            Class that represents the discrete draw data for a single from of the pen tool.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Behaviors.ActionData.DrawData.Transform">
            <summary>
            The transform for the collected draw position.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.ActionData.PenData">
            <summary>
            Class that represents the pen tool action data.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Behaviors.ActionData.PenData.DrawData">
            <summary>
            The list of draw data entries from the pen tool.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.ActionData.PenData.Reset">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Behaviors.Actions.ActionState">
            <summary>
            The state of the action.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.Actions.ActionState.Started">
            <summary>
            The action is started.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.Actions.ActionState.Stopped">
            <summary>
            The action is stopped.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.Actions.ActionState.Performing">
            <summary>
            The action is currently being performed.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.Actions.ActionStateChangedArgs">
            <summary>
            The event argument class to provide information about the action state change event.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Behaviors.Actions.ActionStateChangedArgs.UserId">
            <summary>
            The id of the user that has cause a state change for the action.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Behaviors.Actions.ActionStateChangedArgs.OldState">
            <summary>
            The old state of the action.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Behaviors.Actions.ActionStateChangedArgs.NewState">
            <summary>
            The new state of the action.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.ActionStateChangedArgs.#ctor(System.Guid,MixedRealityExtension.Behaviors.Actions.ActionState,MixedRealityExtension.Behaviors.Actions.ActionState)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Behaviors.Actions.ActionStateChangedArgs"/> class.
            </summary>
            <param name="userId">The id of the user causing the state change.</param>
            <param name="oldState">The old state of the action.</param>
            <param name="newState">The new state of the action.</param>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.Actions.MWActionBase">
            <summary>
            Abstract base class for an action within the MRE behavior system.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.Actions.MWAction">
            <summary>
            The class that serves as the basic actions that are a part of a behavior.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.MWAction.StartAction(MixedRealityExtension.Core.Interfaces.IUser)">
            <summary>
            Signals the start of this action for the given user.
            </summary>
            <param name="user">The user starting the action.</param>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.MWAction.StopAction(MixedRealityExtension.Core.Interfaces.IUser)">
            <summary>
            Signals the stop of this action for the given user.
            </summary>
            <param name="user">The user stopping the action.</param>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.MWAction.PerformActionUpdate">
            <summary>
            Provides an action update while the action is being performed.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.Actions.MWAction`1">
            <summary>
            The class that serves as the basic actions with action data that are a part of a behavior.
            </summary>
            <typeparam name="ActionDataT">The action data type associated with the action events.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.MWAction`1.StartAction(MixedRealityExtension.Core.Interfaces.IUser,`0)">
            <summary>
            Signals the start of this action for the given user.
            </summary>
            <param name="user">The user starting the action.</param>
            <param name="actionData">The optional data to pass along.</param>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.MWAction`1.StopAction(MixedRealityExtension.Core.Interfaces.IUser,`0)">
            <summary>
            Signals the stop of this action for the given user.
            </summary>
            <param name="user">The user stopping the action.</param>
            <param name="actionData">The optional data to pass along.</param>
        </member>
        <member name="M:MixedRealityExtension.Behaviors.Actions.MWAction`1.PerformActionUpdate(`0)">
            <summary>
            Provides an action update while the action is being performed.
            </summary>
            <param name="actionData">The optional data to pass along.</param>
        </member>
        <member name="T:MixedRealityExtension.Behaviors.BehaviorType">
            <summary>
            The type of behavior as a flag supported enum value.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.BehaviorType.None">
            <summary>
            None behavior.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.BehaviorType.Target">
            <summary>
            The target behavior type.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.BehaviorType.Button">
            <summary>
            The button behavior type.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Behaviors.BehaviorType.Pen">
            <summary>
            The pen behavior type.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.AppManifest">
            <summary>
            Class containing author-provided metadata about an MRE instance
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.Name">
            <summary>
            A human-readable name for this MRE
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.Description">
            <summary>
            A human readable description of this MRE's behavior
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.Author">
            <summary>
            The MRE's author name and/or contact information
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.License">
            <summary>
            The license for the MRE's source code
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.RepositoryUrl">
            <summary>
            The location of the MRE's public source code
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.Permissions">
            <summary>
            A list of permissions required for this MRE to run
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.AppManifest.OptionalPermissions">
            <summary>
            A list of permissions that this MRE can use, but are not required
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.CollisionLayer">
            <summary>
            The layers available for MRE colliders.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.CollisionLayer.Default">
            <summary>
            Good for most actors. These will collide with all "physical" things: other default actors,
            navigation actors, and the non-MRE environment. It also blocks the UI cursor and receives press/grab events.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.CollisionLayer.Navigation">
            <summary>
            For actors considered part of the environment. Can move/teleport onto these colliders,
            but cannot click or grab them. For example, the floor, an invisible wall, or an elevator platform.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.CollisionLayer.Hologram">
            <summary>
            For "non-physical" actors. Only interact with the cursor (with press/grab events) and other holograms.
            For example, if you wanted a group of actors to behave as a separate physics simulation
            from the main scene.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.CollisionLayer.UI">
            <summary>
            Actors in this layer do not collide with anything but the UI cursor.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Collision.CollisionData">
            <summary>
            Class that contains all of the data that is provided during a collision.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.CollisionData.otherActorId">
            <summary>
            Gets the id of the other actor we have collided with.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.CollisionData.Contacts">
            <summary>
            Gets the enumerable of contact points that happened during the collision.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.CollisionData.Impulse">
            <summary>
            Gets the impulse of the collision.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.CollisionData.RelativeVelocity">
            <summary>
            Gets the relative velocity of the collision.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Collision.ColliderEventType.None">
            <summary>
            No collider events.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Collision.ColliderEventType.TriggerEnter">
            <summary>
            Event fired when a trigger volume is entered by an actor.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Collision.ColliderEventType.TriggerExit">
            <summary>
            Event fired when a trigger volume is exited by an actor.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Collision.ColliderEventType.CollisionEnter">
            <summary>
            Event fired when a collision has entered between the attached actor and another actor.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Collision.ColliderEventType.CollisionExit">
            <summary>
            Event fired when a collision has exited between the attached actor and another actor.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Collision.ContactPoint">
            <summary>
            Class that contains the data from a contact point in a collision.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.ContactPoint.Normal">
            <summary>
            Gets the normal of the collision contact point.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.ContactPoint.Point">
            <summary>
            Gets the point of the collision contact point.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collision.ContactPoint.Separation">
            <summary>
            Gets the separation of the collision contact point.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Components.LookAtComponent">
            <summary>
            Unity Behaviour to face toward a given target object
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.ColliderGeometry">
            <summary>
            Abstract class that represents the collider geometry.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.ColliderGeometry.Shape">
            <summary>
            The shape of the collider. <see cref="T:MixedRealityExtension.Core.ColliderType"/>
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.SphereColliderGeometry">
            <summary>
            Class that represents the sphere geometry for a sphere collider.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.SphereColliderGeometry.Shape">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.SphereColliderGeometry.Center">
            <summary>
            The center of the sphere collider geometry.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.SphereColliderGeometry.Radius">
            <summary>
            The radius of the sphere collider geometry.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.BoxColliderGeometry">
            <summary>
            Class that represents the box geometry of a box collider.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.BoxColliderGeometry.Shape">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.BoxColliderGeometry.Size">
            <summary>
            The size of the box collider geometry.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.BoxColliderGeometry.Center">
            <summary>
            The center of the box collider geometry.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.MeshColliderGeometry">
            <summary>
            Class that represents the mesh geometry of a mesh collider.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.MeshColliderGeometry.Shape">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.MeshColliderGeometry.MeshId">
            <summary>
            The asset ID of the collider's mesh
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.CapsuleColliderGeometry">
            <summary>
            Class that describes a capsule-shaped collision volume
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.CapsuleColliderGeometry.Shape">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.CapsuleColliderGeometry.Center">
            <summary>
            The centerpoint of the collider in local space
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.CapsuleColliderGeometry.Size">
            <summary>
            The dimensions of the collider, with the largest component of the vector being the
            primary axis and height of the capsule, and the second largest the radius.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.CapsuleColliderGeometry.Direction">
            <summary>
            The primary axis of the capsule (x = 0, y = 1, z = 2)
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.CapsuleColliderGeometry.Height">
            <summary>
            The height of the capsule along its primary axis, including end caps
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.CapsuleColliderGeometry.Radius">
            <summary>
            The radius of the capsule
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.AutoColliderGeometry">
            <summary>
            Class that represents geometry automatically generated alongside a mesh.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.AutoColliderGeometry.Shape">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.ICollider">
            <summary>
            The interface that represents a collider within the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ICollider.IsEnabled">
            <summary>
            Whether the collider is enabled.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ICollider.IsTrigger">
            <summary>
            Whether the collider is a trigger.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ICollider.Shape">
            <summary>
            The shape of the collider.  <see cref="P:MixedRealityExtension.Core.Interfaces.ICollider.Shape"/>
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.LightType">
            <summary>
            The type of light.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.LightType.Spot">
            <summary>
            Spot light.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.LightType.Point">
            <summary>
            Point light.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.LightType.Directional">
            <summary>
            Directional light.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.ILight">
            <summary>
            The interface that represents a light within the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ILight.Enabled">
            <summary>
            Gets whether the light is enabled.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ILight.Type">
            <summary>
            Gets the type of light it is.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ILight.Color">
            <summary>
            Gets the color of the light.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ILight.Range">
            <summary>
            Gets the range of the light.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ILight.Intensity">
            <summary>
            Gets the intensity of the light.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.ILight.SpotAngle">
            <summary>
            Gets the spot angle of the light.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.IMixedRealityExtensionObject">
            <summary>
            The interface that represents a basic mixed reality extension object within the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IMixedRealityExtensionObject.Id">
            <summary>
            The id of the mixed reality object.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IMixedRealityExtensionObject.Name">
            <summary>
            Gets the name of the actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IMixedRealityExtensionObject.AppInstanceId">
            <summary>
            The instance id of the app that is the owner of this mixed reality extension object.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IMixedRealityExtensionObject.GameObject">
            <summary>
            The unity game object that the actor is associated with.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints">
            <summary>
            The rigid body constraints applied to the rigid body.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.None">
            <summary>
            No constraints.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezePositionX">
            <summary>
            Freeze motion along the X-axis.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezePositionY">
            <summary>
            Freeze motion along the Y-axis.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezePositionZ">
            <summary>
            Freeze motion along the Z-axis.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezePosition">
            <summary>
            Freeze motion along all axes.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezeRotationX">
            <summary>
            Freeze rotation along the X-axis.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezeRotationY">
            <summary>
            Freeze rotation along the Y-axis.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezeRotationZ">
            <summary>
            Freeze rotation along the Z-axis.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezeRotation">
            <summary>
            Freeze rotation along all axes.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.RigidBodyConstraints.FreezeAll">
            <summary>
            Freeze rotation and motion along all axes.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.CollisionDetectionMode">
            <summary>
            The type of collision detection mode used by the rigid body.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.CollisionDetectionMode.Discrete">
            <summary>
            Discrete collision detection mode.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.CollisionDetectionMode.Continuous">
            <summary>
            Continuous collision mode.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.CollisionDetectionMode.ContinuousDynamic">
            <summary>
            Continuous and dynamic collision mode.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.IRigidBody">
            <summary>
            The interface that represents a rigid body within the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.Velocity">
            <summary>
            Gets the velocity of the rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.AngularVelocity">
            <summary>
            Gets the angular velocity of the rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.Mass">
            <summary>
            Gets the mass of the rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.DetectCollisions">
            <summary>
            Gets whether collisions are to be deteced with the rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.CollisionDetectionMode">
            <summary>
            Gets the collision detection mode for the rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.UseGravity">
            <summary>
            Gets whether the rigid body uses gravity.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.IsKinematic">
            <summary>
            Gets whether the rigid body is kinematic or not.  Kinematic rigid bodies are not
            simulated by the physics engine.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IRigidBody.ConstraintFlags">
            <summary>
            Gets the constraint flags applied to the rigid body.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IRigidBody.RigidBodyMovePosition(MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Move the position of the rigid body to the new position.
            </summary>
            <param name="position">The position to move the rigid body to.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IRigidBody.RigidBodyMoveRotation(MixedRealityExtension.Core.Types.MWQuaternion)">
            <summary>
            Move the rotation of the rigid body to the new rotation.
            </summary>
            <param name="rotation">The rotation to rotate the rigid body to.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IRigidBody.RigidBodyAddForce(MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Apply a force to the rigid body.
            </summary>
            <param name="force">The force to apply to the rigid body.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IRigidBody.RigidBodyAddForceAtPosition(MixedRealityExtension.Core.Types.MWVector3,MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Apply a force at a specific position of the rigid body.
            </summary>
            <param name="force">The force to apply to the rigid body.</param>
            <param name="position">The position at which to apply the force.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IRigidBody.RigidBodyAddTorque(MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Apply a torque to the rigid body.
            </summary>
            <param name="torque">The torque to apply to the rigid body.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IRigidBody.RigidBodyAddRelativeTorque(MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Apply a relative torque to the rigid body.
            </summary>
            <param name="relativeTorque">The relative torque to apply to the rigid body.</param>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.TextAnchorLocation">
            <summary>
            Describes the anchor position relative to the text
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.TopLeft">
            <summary>
            Anchor text by the top left corner of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.TopCenter">
            <summary>
            Anchor text by the top edge of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.TopRight">
            <summary>
            Anchor text by the top right corner of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.MiddleLeft">
            <summary>
            Anchor text by the left edge of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.MiddleCenter">
            <summary>
            Anchor text by the center of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.MiddleRight">
            <summary>
            Anchor text by the right edge of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.BottomLeft">
            <summary>
            Anchor text by the bottom left corner of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.BottomCenter">
            <summary>
            Anchor text by the bottom edge of the bounding box
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextAnchorLocation.BottomRight">
            <summary>
            Anchor text by the bottom right corner of the bounding box
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.TextJustify">
            <summary>
            Describes a line of text's horizontal position relative to the other lines
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextJustify.Left">
            <summary>
            Align text lines' left edges
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextJustify.Center">
            <summary>
            Align text lines' center points
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.TextJustify.Right">
            <summary>
            Align text lines' right edges
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.FontFamily">
            <summary>
            A text's font
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.FontFamily.Default">
            <summary>
            No preference on font, use engine's preferred font
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.FontFamily.Serif">
            <summary>
            Use the engine's preferred serif-style font
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.FontFamily.SansSerif">
            <summary>
            Use the engine's preferred sans serif-style font
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.FontFamily.Monospace">
            <summary>
            Use the engine's preferred monospace font
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Interfaces.FontFamily.Cursive">
            <summary>
            Use the engine's preferred handwriting font
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.IText">
            <summary>
            Interface that is to be implemented to represent an engine's 3d text.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Enabled">
            <summary>
            Whether or not to draw the text
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Contents">
            <summary>
            The text string to be drawn
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Height">
            <summary>
            The height in meters of a line of text
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.PixelsPerLine">
            <summary>
            The vertical resolution of a single line of text
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Anchor">
            <summary>
            The position of the text anchor relative to the block of text
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Justify">
            <summary>
            The alignment of each text line relative to the others
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Font">
            <summary>
            The font family to use to draw the text
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IText.Color">
            <summary>
            The text's color
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IText.ApplyPatch(MixedRealityExtension.Patching.Types.TextPatch)">
            <summary>
            Called to apply the text patch to the object immediately.
            </summary>
            <param name="patch">The text patch to apply.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Interfaces.IText.SynchronizeEngine(MixedRealityExtension.Patching.Types.TextPatch)">
            <summary>
            Called to synchronize the text to the app during an app update.
            </summary>
            <param name="patch">The text patch to apply.</param>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.IActor">
            <summary>
            The interface that represents an actor within the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IActor.Parent">
            <summary>
            Gets the ID of the actor's parent.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IActor.Name">
            <summary>
            Gets and sets the name of the actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IActor.App">
            <summary>
            Gets the app that the actor is owned by.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IActor.LocalTransform">
            <summary>
            Gets the local space transform of the actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IActor.AppTransform">
            <summary>
            The app space transform of this mixed reality extension object.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Interfaces.IUser">
            <summary>
            The interface that represents a user within the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IUser.HostAppUser">
            <summary>
            Host-provided host app user instance.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Interfaces.IUser.Groups">
            <summary>
            The group mask for this user.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.PermissionsExtensions.ToFlags(System.Collections.Generic.IEnumerable{MixedRealityExtension.Core.Permissions})">
            <summary>
            Convenience method to convert an enumerable of permissions into a bitfield
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Core.PermissionsExtensions.ToEnumerable(MixedRealityExtension.Core.Permissions)">
            <summary>
            Convenience method to convert a bitfield of Permissions into an enumerable
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.Id">
            the rigid body identifier
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.RigidBody">
            Unity rigid body 
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.lastTimeKeyFramedUpdate">
            these 3 fields are used to store the actual velocities ,
            IF this body is owned then here we store the transform that last time was sent
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.Ownership">
            true if this rigid body is owned by this client
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.IsKeyframed">
            if the body is moved by key-framing then this is true
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.numOfConsequentSleepingFrames">
            the sleeping condition needs to be fulfilled for a couple of frames such that we mark this body as sleeping
            this sill be capped at the maximum to avoid overflow
        </member>
        <member name="F:MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo.sendMotionType">
            when transmitting the transforms we store if this body is sleeping
        </member>
        <member name="T:MixedRealityExtension.Core.PhysicsBridge">
            <summary>
            the main class that is the bridge between the MRE Unity and the networked physics logic
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.PhysicsBridge.LocalUserId">
            <summary>
             Local user, upload transforms owned by this user.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.PhysicsBridge._lastNumberOfTransformsToBeSent">
            stores the number of transforms that should be have been sent (without cap) to all consumers
        </member>
        <member name="F:MixedRealityExtension.Core.PhysicsBridge._predictor">
            the prediction object
        </member>
        <member name="F:MixedRealityExtension.Core.PhysicsBridge._maxEstimatedLinearVelocity">
            maximal estimated linear velocity
        </member>
        <member name="F:MixedRealityExtension.Core.PhysicsBridge._maxEstimatedAngularVelocity">
            maximal estimated angular velocity
        </member>
        <member name="F:MixedRealityExtension.Core.PhysicsBridge._lastServerTransformUploadSentTime">
            for the low frequency server transforms upload the last time when the update happened
        </member>
        <member name="M:MixedRealityExtension.Core.PhysicsBridge.addSnapshot(System.Guid,MixedRealityExtension.Core.Physics.Snapshot)">
            <summary>
            Add transform snapshot from specified source.
            </summary>
            <param name="sourceId">Snapshot source identifier.</param>
            <param name="snapshot">List of transform at specified timestamp.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.PhysicsBridge.GenerateSnapshot(System.Single,UnityEngine.Transform)">
            <summary>
            Generate rigid body transform snapshot for owned transforms with specified timestamp.
            </summary>
            <param name="time">Snapshot timestamp.</param>
            <param name="rootTransform">Root transform.</param>
            <returns>Generated snapshot.</returns>
        </member>
        <member name="M:MixedRealityExtension.Core.PhysicsBridge.shouldSendLowFrequencyTransformUpload(System.Single)">
            returns true if the low frequency upload should be sent to the server
        </member>
        <member name="M:MixedRealityExtension.Core.PhysicsBridge.GenerateServerTransformUploadPatch(System.Guid,System.Single)">
            generates the message that updates the transforms on the server side (this is done in a low frequency manner)
            <returns> message that should be sent to the server</returns>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.PredictionTimeParameters">
            interface struct to pass time step informations
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.PredictionTimeParameters.DT">
            current time step of the frame
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.PredictionTimeParameters.halfDT">
            half of the time step for time tolerance 
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.PredictionTimeParameters.invDT">
            to avoid divisions the inverse of the delta time of this frame
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.PredictionTimeParameters.setFromDT(System.Single)">
            method to set all the fields from DT;
            <param name="timeStep"> time step of the current frame </param> 
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.IPrediction">
            general interface to predict the remote bodies over multiple frames 
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.IPrediction.StartBodyPredicitonForNextFrame">
            this signals to the interface that we will now start streaming into the prediction
            the remote and owned body pairs for the current frame
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.IPrediction.AddAndProcessRemoteBodyForPrediction(MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo,MixedRealityExtension.Core.Physics.RigidBodyTransform,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,MixedRealityExtension.Core.Physics.PredictionTimeParameters)">
            before a remote body gets stepped this needs to be called for all potentially
            predicted remote bodies for one frame
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.IPrediction.PredictAllRemoteBodiesWithOwnedBodies(System.Collections.Generic.SortedList{System.Guid,MixedRealityExtension.Core.RigidBodyPhysicsBridgeInfo}@,MixedRealityExtension.Core.Physics.PredictionTimeParameters)">
            In the last step within the frame the owned bodies are added to the prediction
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.IPrediction.Clear">
            reset internal state
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.RigidBodyTransform">
            <summary>
            Rigid body transform (position and rotation).
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.Snapshot">
            <summary>
            Snapshot of rigid body transforms at specified point in time.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.Snapshot.SnapshotFlags">
            <summary>
            Flags that mark special properties of the snapshot
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.Snapshot.SnapshotFlags.NoFlags">
            No special treatment
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.Snapshot.SnapshotFlags.ResetJitterBuffer">
            Reset the jitter buffer
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.Snapshot.TransformInfo">
            <summary>
            Transform identifier and respective transform.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.Snapshot.TransformInfo.MotionType">
            <summary>
            The type of the motion
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.Snapshot.DoSendThisSnapshot">
            <summary>
            Returns true if this snapshot should be send even if it has no transforms
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.Snapshot.Flags">
            <summary>
            Special flag for a snapshot.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.Snapshot.Time">
            <summary>
            Timestamp of the snapshot.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.Snapshot.Transforms">
            <summary>
            All transforms in the snapshot.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.SnapshotBuffer">
            <summary>
            Stored snapshots from a single source.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._snapshots">
            <summary>
            Snapshots sorted by snapshot timestamp.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._lastAppliedSnapshot">
            <summary>
            We might need last applied snapshot for further intepolations.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._rigidBodies">
            <summary>
            Rigid body data sorted by rigid body id.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._pendingRigidBodyManagementActions">
            <summary>
            Pending rigid body add/remove actions since last step.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._runningStats">
            <summary>
            Running average for packet availability at different time checkpoints relative to current output.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._upateHealth">
            <summary>
            Tracks updated time within the last second.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._areAllRigidBodiesSleeping">
            in order to reset the jitter buffer properly we need to know if the last updates only has sleeping bodies
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.SnapshotBuffer.AddSnapshot(MixedRealityExtension.Core.Physics.Snapshot)">
            <summary>
            Add snapshot to the buffer if snapshot with same timestamp does not exists in the buffer.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.SnapshotBuffer.Step(System.Single)">
            <summary>
             Forwards the buffer for time depending requested time stap and snapshot availibility.
            </summary>
            <param name="timestep">Requested time to forward.</param>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.SnapshotBuffer.UpdateTimeHealth">
            <summary>
            Based on time covered by updates received with last second.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer.UpdateTimeHealth.UpdatedTime">
            <summary>
            Running average time covered with updates within past second.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.SnapshotBuffer.RunningStats">
            <summary>
            Running average for update availability at different time checkpoints relative to current output.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.SnapshotBuffer.RunningStats.SlowDownIndicator">
            <summary>
            Estimated update availability if output is slowed down.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.SnapshotBuffer.RunningStats.CurrentRateQuality">
            <summary>
            Estimated update availability with current output rate.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Physics.SnapshotBuffer.RunningStats.SpeedUpIndicator">
            <summary>
            Estimated update availability if output is sped up.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.SnapshotBuffer.RunningStats.SlowDown">
            <summary>
            Output time is shifting, we need to shift heuristic values as well.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.SnapshotBuffer.RunningStats.SpeedUp">
            <summary>
            Output time is shifting, we need to shift heuristic values as well.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.SnapshotBuffer._timePrecision">
            <summary>
            Time precision is 1 millisecond.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.SnapshotBuffer.ISource">
            <summary>
            Rigid body update provider
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.SnapshotBuffer.SnapshotSource">
            <summary>
            Update rigid body from snapshot.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.SnapshotBuffer.InterpolationSource">
            <summary>
            Update rigid body interpolating between two snapshots.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.MultiSourceCombinedSnapshot">
            <summary>
            Combines rigid body transforms from multiple sources.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.TimeSnapshotManager">
            <summary>
            Multi-source time and snapshot manager.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.TimeSnapshotManager.addSnapshot(System.Guid,MixedRealityExtension.Core.Physics.Snapshot)">
            <summary>
            Add snapshot for specified source.
            Register source if entry does not exist.
            </summary>
            <param name="sourceId">Snapshot source.</param>
            <param name="snapshot">List of transform at specified timestamp.</param>
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.CollisionMonitorInfo">
            to monitor the collisions between frames this we need to store per contact pair. 
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.CollisionMonitorInfo.keyframedInterpolationRatio">
            how much we interpolate between the jitter buffer and the simulation
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.CollisionSwitchInfo">
            for interactive collisions we need to store the implicit velocities and other information	
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.CollisionSwitchInfo.isKeyframed">
            if a body is really key framed on the owner side then we should not turn it to dynamic on the remote side
        </member>
        <member name="T:MixedRealityExtension.Core.Physics.PredictionInterpolation">
            This class implements one strategy for the prediction where in the neighborhood of the
            remote-owned body collision switches to both dynamic strategies and after some time tries to
            interpolate back to the streamed transform positions. 
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.PredictionInterpolation._switchCollisionInfos">
            when we update a body we compute the implicit velocity. This velocity is needed, in case of collisions to switch from kinematic to kinematic=false
        </member>
        <member name="F:MixedRealityExtension.Core.Physics.PredictionInterpolation._monitorCollisionInfo">
            input is Guid from the remote body (in case of multiple collisions take the minimum
        </member>
        <member name="M:MixedRealityExtension.Core.Physics.PredictionInterpolation.#ctor">
            empty Ctor
        </member>
        <member name="T:MixedRealityExtension.Core.Types.MWVector2">
            <summary>
            Class that represents a 2D vector within the Mixed Reality Extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWVector2.X">
            <summary>
            Get or sets the X component of the vector.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWVector2.Y">
            <summary>
            Get or sets the Y component of the vector.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWVector2"/> class.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector2.#ctor(MixedRealityExtension.Core.Types.MWVector2)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWVector2"/> class.
            </summary>
            <param name="vector">The other <see cref="T:MixedRealityExtension.Core.Types.MWVector2"/> to use for the initial value of the components for the new instance.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWVector2"/> class.
            </summary>
            <param name="x">The initial value of the X component.</param>
            <param name="y">The initial value of the Y component.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector2.Equals(MixedRealityExtension.Core.Types.MWVector2)">
            <summary>
            Tests for equality based on value comparisons of the vector components.
            </summary>
            <param name="other">The other vector to test equality of components against.</param>
            <returns>Whether the two vector are equal by component values.</returns>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector2.ToString">
            <summary>
            Gets the string representation of a <see cref="T:MixedRealityExtension.Core.Types.MWVector2"/> instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.PrimitiveShape">
            <summary>
            Describes the general shape of a primitive. Specifics are described in a [[PrimitiveDefinition]] object.
            Docs for shape-specific stuff are in the SDK: https://microsoft.github.io/mixed-reality-extension-sdk/enums/primitiveshape.html
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.PrimitiveDefinition">
            <summary>
            The size, shape, and description of a primitive.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Types.PrimitiveDefinition.Shape">
            <summary>
            The general shape of the defined primitive.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Types.PrimitiveDefinition.Dimensions">
            <summary>
            The bounding box of the primitive.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Types.PrimitiveDefinition.USegments">
            <summary>
            The number of horizontal or radial segments of spheres, cylinders, capsules, and planes.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.Types.PrimitiveDefinition.VSegments">
            <summary>
            The number of vertical or axial segments of spheres, capsules, and planes.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.MWColor">
            <summary>
            Class that represents the color type in the Mixed Reality Extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWColor.R">
            <summary>
            Gets or sets the red value of the color.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWColor.G">
            <summary>
            Gets or sets the green value of the color.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWColor.B">
            <summary>
            Gets or sets the blue value of the color.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWColor.A">
            <summary>
            Gets or sets the alpha value of the color.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWColor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWColor"/> class.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWColor.#ctor(MixedRealityExtension.Core.Types.MWColor)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWColor"/> class.
            </summary>
            <param name="color">The other <see cref="T:MixedRealityExtension.Core.Types.MWColor"/> to use for the initial value of the components for the new instance.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWColor"/> class.
            </summary>
            <param name="r">The initial red value.</param>
            <param name="g">The initial green value.</param>
            <param name="b">The initial blue value.</param>
            <param name="a">The initial alpha value.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWColor.Equals(MixedRealityExtension.Core.Types.MWColor)">
            <summary>
            Tests for equality based on value comparisons of the color components.
            </summary>
            <param name="other">The other color to test equality of components against.</param>
            <returns>Whether the two color are equal by component values.</returns>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.MWQuaternion">
            <summary>
            Class that represents a quaternion in the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWQuaternion.X">
            <summary>
            Gets or sets the X component of the quaternion.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWQuaternion.Y">
            <summary>
            Gets or sets the Y component of the quaternion.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWQuaternion.Z">
            <summary>
            Gets or sets the Z component of the quaternion.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWQuaternion.W">
            <summary>
            Gets or sets the W component of the quaternion.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWQuaternion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWQuaternion"/> class.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWQuaternion.#ctor(MixedRealityExtension.Core.Types.MWQuaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWQuaternion"/> class.
            </summary>
            <param name="quaternion">The other <see cref="T:MixedRealityExtension.Core.Types.MWQuaternion"/> to use for the initial value of the components for the new instance.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWQuaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWQuaternion"/> class.
            </summary>
            <param name="w">The initial value of the X component.</param>
            <param name="x">The initial value of the Y component.</param>
            <param name="y">The initial value of the Z component.</param>
            <param name="z">The initial value of the W component.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWQuaternion.Equals(MixedRealityExtension.Core.Types.MWQuaternion)">
            <summary>
            Tests for equality based on value comparisons of the quaternion components.
            </summary>
            <param name="other">The other quaternion to test equality of components against.</param>
            <returns>Whether the two quaternion are equal by component values.</returns>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWQuaternion.ToString">
            <summary>
            Gets the string representation of a <see cref="T:MixedRealityExtension.Core.Types.MWQuaternion"/> instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.MWTransform">
            <summary>
            Class that represents a transform in the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWTransform.Position">
            <summary>
            Gets or sets the position of the transform.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWTransform.Rotation">
            <summary>
            Gets or sets the rotation of the transform.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWTransform"/> class.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWTransform.#ctor(MixedRealityExtension.Core.Types.MWTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWTransform"/> class.
            </summary>
            <param name="transform">The other <see cref="T:MixedRealityExtension.Core.Types.MWTransform"/> to use for the initial value of the components for the new instance.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWTransform.#ctor(MixedRealityExtension.Core.Types.MWVector3,MixedRealityExtension.Core.Types.MWQuaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWTransform"/> class.
            </summary>
            <param name="position">The position of the new transform.</param>
            <param name="rotation">The rotation of the new transform.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWTransform.Equals(MixedRealityExtension.Core.Types.MWTransform)">
            <summary>
            Tests for equality based on value comparisons of the transform components.
            </summary>
            <param name="other">The other transform to test equality of components against.</param>
            <returns>Whether the two transforms are equal by component values.</returns>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWTransform.ToString">
            <summary>
            Gets the string representation of a <see cref="T:MixedRealityExtension.Core.Types.MWTransform"/> instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.MWScaledTransform">
            <summary>
            Class that represents a scaled transform in the mixed reality extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWScaledTransform.Scale">
            <summary>
            Gets or sets the scale of the transform.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWScaledTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWScaledTransform"/> class.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWScaledTransform.#ctor(MixedRealityExtension.Core.Types.MWScaledTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWScaledTransform"/> class.
            </summary>
            <param name="transform">The other <see cref="T:MixedRealityExtension.Core.Types.MWScaledTransform"/> to use for the initial value of the components for the new instance.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWScaledTransform.#ctor(MixedRealityExtension.Core.Types.MWVector3,MixedRealityExtension.Core.Types.MWQuaternion,MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWScaledTransform"/> class.
            </summary>
            <param name="position">The position of the new scaled transform.</param>
            <param name="rotation">The rotation of the new scaled transform.</param>
            <param name="scale">The scale of the new scaled transform.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWScaledTransform.Equals(MixedRealityExtension.Core.Types.MWScaledTransform)">
            <summary>
            Tests for equality based on value comparisons of the scaled transform components.
            </summary>
            <param name="other">The other scaled transform to test equality of components against.</param>
            <returns>Whether the two scaled transforms are equal by component values.</returns>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWScaledTransform.ToString">
            <summary>
            Gets the string representation of a <see cref="T:MixedRealityExtension.Core.Types.MWScaledTransform"/> instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="T:MixedRealityExtension.Core.Types.MWVector3">
            <summary>
            Class that represents a 3D vector within the Mixed Reality Extension runtime.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWVector3.X">
            <summary>
            Get or sets the X component of the vector.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWVector3.Y">
            <summary>
            Get or sets the Y component of the vector.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Types.MWVector3.Z">
            <summary>
            Get or sets the Z component of the vector.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWVector3"/> class.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector3.#ctor(MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWVector3"/> class.
            </summary>
            <param name="vector">The other <see cref="T:MixedRealityExtension.Core.Types.MWVector3"/> to use for the initial value of the components for the new instance.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Types.MWVector3"/> class.
            </summary>
            <param name="x">The initial value of the X component.</param>
            <param name="y">The initial value of the Y component.</param>
            <param name="z">The initial value of the Z component.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector3.Equals(MixedRealityExtension.Core.Types.MWVector3)">
            <summary>
            Tests for equality based on value comparisons of the vector components.
            </summary>
            <param name="other">The other vector to test equality of components against.</param>
            <returns>Whether the two vector are equal by component values.</returns>
        </member>
        <member name="M:MixedRealityExtension.Core.Types.MWVector3.ToString">
            <summary>
            Gets the string representation of a <see cref="T:MixedRealityExtension.Core.Types.MWVector3"/> instance.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Contents">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Height">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.PixelsPerLine">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Anchor">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Justify">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Font">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Text.Color">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.Text.ApplyPatch(MixedRealityExtension.Patching.Types.TextPatch)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.Text.SynchronizeEngine(MixedRealityExtension.Patching.Types.TextPatch)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Core.Actor">
            <summary>
            Class that represents an actor in a mixed reality extension app.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Actor.IsSimulatedByLocalUser">
            <summary>
            Checks if rigid body is simulated locally.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Actor.Parent">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Actor.Name">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Actor.MixedRealityExtension#Core#Interfaces#IActor#App">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Actor.LocalTransform">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Actor.AppTransform">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.Actor.SetCollider(MixedRealityExtension.Patching.Types.ColliderPatch)">
            <summary>
            Precondition: The mesh referred to by MeshId is loaded and available for use.
            </summary>
            <param name="colliderPatch"></param>
        </member>
        <member name="M:MixedRealityExtension.Core.Actor.CheckMaterialReferenceChanged(System.Guid)">
            <summary>
            Precondition: Asset identified by `id` exists, and is a material.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:MixedRealityExtension.Core.ColliderType">
            <summary>
            The type of the collider.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.ColliderType.None">
            <summary>
            No collider.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.ColliderType.Auto">
            <summary>
            Choose best collider shape for mesh
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.ColliderType.Box">
            <summary>
            Box shaped collider.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.ColliderType.Sphere">
            <summary>
            Sphere shaped collider.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.ColliderType.Capsule">
            <summary>
            Capsule shaped collider.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Core.ColliderType.Mesh">
            <summary>
            Mesh collider.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.Collider.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Collider.IsTrigger">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Collider.Bounciness">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Collider.StaticFriction">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Collider.DynamicFriction">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Collider.Shape">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Light.Enabled">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Light.Type">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Light.Color">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Light.Range">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Light.Intensity">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.Light.SpotAngle">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.Light.#ctor(UnityEngine.Light)">
            <summary>
            Initializes a new instance of the <see cref="T:MixedRealityExtension.Core.Light"/> class.
            </summary>
            <param name="light">The <see cref="T:MixedRealityExtension.Core.Light"/> object to bind to.</param>
        </member>
        <member name="M:MixedRealityExtension.Core.Light.ApplyPatch(MixedRealityExtension.Patching.Types.LightPatch)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.Light.SynchronizeEngine(MixedRealityExtension.Patching.Types.LightPatch)">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.MixedRealityExtensionObject.Id">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.MixedRealityExtensionObject.AppInstanceId">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.MixedRealityExtensionObject.Name">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.MixedRealityExtensionObject.GameObject">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.MixedRealityExtensionObject.LocalUser">
            <summary>
            Gets the local user. Will be null if the local client has not joined as a user.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.Velocity">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.AngularVelocity">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.Mass">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.DetectCollisions">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.CollisionDetectionMode">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.UseGravity">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.IsKinematic">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.Core.RigidBody.ConstraintFlags">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.RigidBody.RigidBodyMovePosition(MixedRealityExtension.Core.Types.MWVector3)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.RigidBody.RigidBodyMoveRotation(MixedRealityExtension.Core.Types.MWQuaternion)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.RigidBody.RigidBodyAddForce(MixedRealityExtension.Core.Types.MWVector3)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.RigidBody.RigidBodyAddForceAtPosition(MixedRealityExtension.Core.Types.MWVector3,MixedRealityExtension.Core.Types.MWVector3)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.RigidBody.RigidBodyAddTorque(MixedRealityExtension.Core.Types.MWVector3)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Core.RigidBody.RigidBodyAddRelativeTorque(MixedRealityExtension.Core.Types.MWVector3)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.MediaCommand">
            <summary>
            Special commands to change the mode of the sound instance?
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaCommand.Start">
            <summary>
            Start a new sound instance
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaCommand.Update">
            <summary>
            Modify an active sound instance
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaCommand.Stop">
            <summary>
            Destroy an active sound instance
            </summary>
        </member>
        <member name="T:MixedRealityExtension.MediaStateOptions">
            <summary>
            Modifiable Media Instance Options - shared between sounds and video streams
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Pitch">
            <summary>
            pitch offset in halftones (0=default, 12=one octave higher, -12=one octave lower)
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Volume">
            <summary>
            volume multiplier, (0.0-1.0, where 0.0=no sound, 1.0=maximum). Default to 1.0
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Looping">
            <summary>
            repeat the sound when ended, or turn it off after playing once. Default to false
            This does not apply to video streams, only to sounds
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.paused">
            <summary>
            pause or unpause the media. Default to false
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Doppler">
            <summary>
            the amount that sound pitch is modified when moving towards/away from sound source.
            For music and speech, set this to 0, but for regular objects set to 1.0 or higher. Default to 1.0
            This does not apply to video streams, only to sounds
            /// </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Spread">
            <summary>
            Specify how much the sound is non-directional (playing the same volume in each speaker regardless of facing direction)
            vs directional (playing only in the speakers that are pointing towards the sound source).
            This can be used to make sounds seem more "wide".
            It is also useful for multi-channel sounds (such as music), because a fully directional sound will always sound like mono.
            Default to 0.0. For music and ambient looping sounds, set this between 0.5 and 1.0.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.RolloffStartDistance">
            <summary>
            Sound will play at full volume until user is this many meters away, and then volume will decrease logarithmically
            Default to 1.0. For sound that needs to fill up a large space (like a concert), increase this number.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Time">
            <summary>
            The media should start at, or seek this many seconds into the media.
            Time is in seconds relative to start of clip.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.MediaStateOptions.Visible">
            <summary>
            Should the video stream be visible or invisible
            Does not apply to sounds, only to video streams.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Factories.DefaultMaterialPatcher">
            <summary>
            Default implementation of IMaterialPatcher. Only handles color and mainTexture property updates.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Factories.DefaultMaterialPatcher.ApplyMaterialPatch(MixedRealityExtension.App.IMixedRealityExtensionApp,UnityEngine.Material,MixedRealityExtension.Assets.Material)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Factories.DefaultMaterialPatcher.GeneratePatch(MixedRealityExtension.App.IMixedRealityExtensionApp,UnityEngine.Material)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Factories.DefaultMaterialPatcher.UsesTexture(MixedRealityExtension.App.IMixedRealityExtensionApp,UnityEngine.Material,UnityEngine.Texture)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Factories.SimpleLayerApplicator">
            <summary>
            A simple implementation of ILayerApplicator that simply sets collision actors' `layer` properties.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Factories.SimpleLayerApplicator.DefaultLayer">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Factories.SimpleLayerApplicator.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Apply the given Unity layers to MRE colliders.
            </summary>
            <param name="defaultLayer"></param>
            <param name="navigationLayer"></param>
            <param name="hologramLayer"></param>
            <param name="uiLayer"></param>
        </member>
        <member name="M:MixedRealityExtension.Factories.SimpleLayerApplicator.ApplyLayerToCollider(System.Nullable{MixedRealityExtension.Core.CollisionLayer},UnityEngine.Collider)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Factories.SimpleLayerApplicator.DetermineLayerOfCollider(UnityEngine.Collider)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Factories.SimplePermissionManager">
            <summary>
            Simple permission manager that grants a fixed set of permissions to all MREs
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Factories.SimplePermissionManager.GrantedPermissions">
            <summary>
            The static set of permissions that this manager grants
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Factories.SimplePermissionManager.#ctor(MixedRealityExtension.Core.Permissions)">
            <summary>
            Set up the simple manager
            </summary>
            <param name="grantedPermissions">The permissions to grant to all MREs</param>
        </member>
        <member name="E:MixedRealityExtension.Factories.SimplePermissionManager.OnPermissionDecisionsChanged">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Factories.SimplePermissionManager.PromptForPermissions(System.Uri,System.Collections.Generic.IEnumerable{MixedRealityExtension.Core.Permissions},System.Collections.Generic.IEnumerable{MixedRealityExtension.Core.Permissions},MixedRealityExtension.Core.Permissions,MixedRealityExtension.Core.Permissions,MixedRealityExtension.Core.AppManifest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Factories.SimplePermissionManager.CurrentPermissions(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="T:MixedRealityExtension.Factories.GLTFImporterFactory">
            <inheritdoc cref="T:MixedRealityExtension.PluginInterfaces.IGLTFImporterFactory"/>
        </member>
        <member name="M:MixedRealityExtension.Factories.GLTFImporterFactory.CreateImporter(System.String,UnityGLTF.Loader.IDataLoader,UnityGLTF.AsyncCoroutineHelper)">
            <inheritdoc cref="M:MixedRealityExtension.Factories.GLTFImporterFactory.CreateImporter(System.String,UnityGLTF.Loader.IDataLoader,UnityGLTF.AsyncCoroutineHelper)"/>
        </member>
        <member name="M:MixedRealityExtension.Factories.GLTFImporterFactory.CreateImporter(GLTF.Schema.GLTFRoot,UnityGLTF.Loader.IDataLoader,UnityGLTF.AsyncCoroutineHelper,System.IO.Stream)">
            <inheritdoc cref="M:MixedRealityExtension.Factories.GLTFImporterFactory.CreateImporter(GLTF.Schema.GLTFRoot,UnityGLTF.Loader.IDataLoader,UnityGLTF.AsyncCoroutineHelper,System.IO.Stream)"/>
        </member>
        <member name="T:MixedRealityExtension.Factories.MWTextFactory">
            <summary>
            Implements the text component as a Unity Text Mesh
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Factories.MWTextFactory.SerifFont">
            <summary>
            The Unity Font resource used for "serif" text
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Factories.MWTextFactory.SansSerifFont">
            <summary>
            The Unity Font resource used for "sans serif" text
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Factories.MWTextFactory.#ctor(UnityEngine.Font,UnityEngine.Font)">
            <summary>
            Initialize a text factory
            </summary>
            <param name="serif">The Unity font resource for "serif" text</param>
            <param name="sansSerif">The Unity font resource for "sans serif" text</param>
        </member>
        <member name="M:MixedRealityExtension.Factories.MWTextFactory.CreateText(MixedRealityExtension.Core.Interfaces.IActor)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Factories.MWPrimitiveFactory.CreatePrimitive(MixedRealityExtension.Core.Types.PrimitiveDefinition)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.Converters.UnsignedConverter">
            <summary>
            Converts signed integers into bit-equivalent unsigned integers,
            because JS doesn't have a concept of unsigned.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.UnsignedConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.UnsignedConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.UnsignedConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.Converters.CollisionGeometryConverter">
            <summary>
            Json converter for collision geometry serialization data.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.CollisionGeometryConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.CollisionGeometryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.CollisionGeometryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.Converters.DashFormattedEnumConverter">
            <summary>
            Json converter for dash-formatted enumerations.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.DashFormattedEnumConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.DashFormattedEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.Messaging.Payloads.Converters.DashFormattedEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.LoadAssets">
            <summary>
            App => Engine
            Payload instructing the engine to preload the listed asset container.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.LoadAssets.ContainerId">
            <summary>
            The logical container that the new assets should be assigned to.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.LoadAssets.Source">
            <summary>
            The asset container to load.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.LoadAssets.ColliderType">
            <summary>
            The type of collider to add to the actor upon creation.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.AssetsLoaded">
            <summary>
            Engine => App
            Replies to LoadAssetRequests with the contents of the loaded bundle.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AssetsLoaded.FailureMessage">
            <summary>
            If the load failed, this string contains the reason why.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AssetsLoaded.Assets">
            <summary>
            The loaded assets.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.AssetUpdate">
            <summary>
            App => Engine
            An asset has updated.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.AssetUpdate.Asset">
            <summary>
            The asset that was updated
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateFromPrefab">
            <summary>
            App => Engine
            Instructs the engine to instantiate the prefab with the given ID.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CreateFromPrefab.PrefabId">
            <summary>
            The ID of an already-loaded asset
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CreateFromPrefab.CollisionLayer">
            <summary>
            Assign all colliders in this prefab to this layer
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateAsset">
            <summary>
            App => Engine
            Generate a new native asset with the included properties
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CreateAsset.ContainerId">
            <summary>
            The logical container that the new assets should be assigned to.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CreateAsset.Definition">
            <summary>
            Initial properties of the newly created asset
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.UnloadAssets">
            <summary>
            App => Engine
            Destroy all assets in the given container
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.UnloadAssets.ContainerId">
            <summary>
            The container to unload
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.AppToEngineRPC">
            <summary>
            App => Engine
            Payload that contains a remote procedure call to be made in the engine.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AppToEngineRPC.ChannelName">
            <summary>
            (Optional) The channel this message is targeting. If present, message will be routed to a matching channel handler.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AppToEngineRPC.ProcName">
            <summary>
            The name of the remote procedure call.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AppToEngineRPC.UserId">
            <summary>
            (Optional) The target user of this message.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AppToEngineRPC.Args">
            <summary>
            The arguments to the remote procedure call.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateActor">
            <summary>
            App => Engine
            Payload for when the app wants to create an asset.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateActor.Actor">
            <summary>
            The initial actor patch to apply to the newly created actor.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateFromLibrary">
            <summary>
            App => Engine
            Payload for when the app wants to create an asset from the host library.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateFromLibrary.ResourceId">
            <summary>
            The resource url for the asset bundle.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateEmpty">
            <summary>
            App => Engine
            Payload for when the app wants to create an empty actor.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.ActorUpdate">
            <summary>
            App => Engine
            Payload for when the app wants to update an actor with a patch.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.ActorUpdate.Actor">
            <summary>
            The actor patch to apply to the actor associated with the patch.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.ActorCorrection">
            <summary>
            App => Engine
            Payload for when the app wants to update an actor with a patch, interpolated.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.AnimationUpdate">
            <summary>
            Bidirectional
            Payload to sync animation state between client and server.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.AnimationUpdate.Animation">
            <summary>
            The ID and state delta of the animation.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.DestroyActors">
            <summary>
            App => Engine
            Payload for when the app wants to destroy one or more actors.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.DestroyActors.ActorIds">
            <summary>
            The enumeration of ids for the actors to be destroyed.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.DestroyAnimations">
            <summary>
            App => Engine
            The marked animations should be unloaded.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.DestroyAnimations.AnimationIds">
            <summary>
            The list of IDs for animations to be destroyed
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.StateRestore">
            <summary>
            Payload for when the app needs to restore the state of a set of actors.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.StateRestore.Actors">
            <summary>
            The enumeration of actor patches to apply to their corresponding actors.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RigidBodyCommands">
            <summary>
            App => Engine
            Payload for when the app wants to execute one or more commands on the rigid body of an actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RigidBodyCommands.ActorId">
            <summary>
            The id of the actor to execute rigid body commands on.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RigidBodyCommands.CommandPayloads">
            <summary>
            The enumeration of command payloads to executed on the rigid body.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RBAddForce">
            <summary>
            App => Engine
            Payload for when the app wants to execute an add force command on an actor's rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBAddForce.Force">
            <summary>
            The force patch to apply to the rigid body.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RBAddForceAtPosition">
            <summary>
            App => Engine
            Payload for when the app wants to execute an add force at position command on an actor's rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBAddForceAtPosition.Force">
            <summary>
            The force patch to apply to the rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBAddForceAtPosition.Position">
            <summary>
            The position at which to apply the force to the rigid body.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RBAddTorque">
            <summary>
            App => Engine
            Payload for when the app wants to execute an add torque command on an actor's rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBAddTorque.Torque">
            <summary>
            The torque patch to add to the rigid body.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RBAddRelativeTorque">
            <summary>
            App => Engine
            Payload for when the app wants to execute an add relative torque command on an actor's rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBAddRelativeTorque.RelativeTorque">
            <summary>
            The relative torque patch to add to the rigid body.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RBMovePosition">
            <summary>
            App => Engine
            Payload for when the app wants to execute a move position command on an actor's rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBMovePosition.Position">
            <summary>
            The position patch to move the rigid body to.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.RBMoveRotation">
            <summary>
            App => Engine
            Payload for when the app wants to execute a move rotation command on an actor's rigid body.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.RBMoveRotation.Rotation">
            <summary>
            The rotation patch to move the rigid body to.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateAnimation">
            <summary>
            App => Engine
            Payload for when the app wants to create an animation on a specific actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.ActorId">
            <summary>
            The id of the actor to create the animation on.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.AnimationId">
            <summary>
            If supplied, indicates this should be created as a "new" animation.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.AnimationName">
            <summary>
            The name of the animation to create.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.Keyframes">
            <summary>
            The enumeration of animation key frames to set to the animation. See <see cref="T:MixedRealityExtension.Animation.MWAnimationKeyframe"/>.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.Events">
            <summary>
            The enumeration of animation events to set to the animation. See <see cref="T:MixedRealityExtension.Animation.MWAnimationEvent"/>.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.WrapMode">
            <summary>
            The wrap mode of the animation. See <see cref="T:MixedRealityExtension.Animation.MWAnimationWrapMode"/>.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation.InitialState">
            <summary>
            (Optional) The initial time, speed, and enable state of the animation (all values also optional). See <see cref="T:MixedRealityExtension.Animation.MWSetAnimationStateOptions"/>.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CreateAnimation2">
            <summary>
            App => Engine
            Payload to bind animation data to targets.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation2.Animation">
            <summary>
            The initialization state of the animation.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.CreateAnimation2.Targets">
            <summary>
            Mapping of placeholder names to target GUIDs.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SyncAnimations">
            <summary>
            Bidirectional
            Payload to sync animation states between peers.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SetAnimationState">
            <summary>
            App => Engine
            Payload for when the app wants to set animation state.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetAnimationState.ActorId">
            <summary>
            The id of the actor to reset the animation on.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetAnimationState.AnimationName">
            <summary>
            The name of the animation to reset.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetAnimationState.State">
            <summary>
            The animation state to set. All fields are optional.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SetMediaState">
            <summary>
            App => Engine
            Payload for when the app wants to set animation state.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetMediaState.Id">
            <summary>
            The id of the sound instance - used to manipulate the sound after instantiation
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetMediaState.ActorId">
            <summary>
            The id of the actor to play the sound on.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetMediaState.MediaAssetId">
            <summary>
            The GUID of the sound asset to start playing
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetMediaState.MediaCommand">
            <summary>
            Command type (start, update, or stop)
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetMediaState.Options">
            <summary>
            runtime configurable options.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.InterpolateActor">
            <summary>
            App => Engine
            Payload for when the app wants to interpolate actor properties (position, rotation, scale. Other fields in the future).
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.InterpolateActor.ActorId">
            <summary>
            The id of the actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.InterpolateActor.AnimationName">
            <summary>
            The name given to the animation representing this interpolation.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.InterpolateActor.Value">
            <summary>
            The desired state to interpolate to.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.InterpolateActor.Curve">
            <summary>
            The ease cubic-bezier curve parameters this interpolation will follow.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.InterpolateActor.Duration">
            <summary>
            The duration of this interpolation (in seconds).
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.InterpolateActor.Enabled">
            <summary>
            Whether or not to start the interpolation immediately.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SetBehavior">
            <summary>
            App => Engine
            Payload for when the app wants to set the behavior on an actor.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetBehavior.ActorId">
            <summary>
            The id of the actor to add the behaviors to.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetBehavior.BehaviorType">
            <summary>
            The type of behavior to set as the primary behavior. See <see cref="P:MixedRealityExtension.Messaging.Payloads.SetBehavior.BehaviorType"/>.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SetAuthoritative">
            <summary>
            App => Engine
            Specific to multi-peer adapter: Sets whether this client is "authoritative". When authoritative, the client
            sends additional actor updates to the app (rigidbody updates, animation events, etc).
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.SetAuthoritative.Authoritative">
            <summary>
            Whether or not this client is authoritative.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.LocalCommand">
            <summary>
            Local-only. Not sent over network.
            Execute a command.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.LocalCommand.Command">
            <summary>
            The command to execute when this payload is processed.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.UserUpdate">
            <summary>
            The payload containing the user patch produced during user update from engine to app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.UserUpdate.User">
            <summary>
            The user patch generated during the user update.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.ShowDialog">
            <summary>
            App => Engine
            Prompts the client to display a dialog box to the user.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ShowDialog.Text">
            <summary>
            The message presented to the user.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ShowDialog.AcceptInput">
            <summary>
            Whether or not a text reply is allowed.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.DialogResponse">
            <summary>
            Engine => App
            The response to a ShowDialog message.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.DialogResponse.FailureMessage">
            <summary>
            If something goes wrong, fill this with the error message.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.DialogResponse.Submitted">
            <summary>
            Whether OK or Cancel was chosen by the user.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.DialogResponse.Text">
            <summary>
            The text response.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.PhysicsBridgeUpdate">
            <summary>
            Bidirectional
            Payload to sync rigid body transforms between peers.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.PhysicsBridgeUpdate.PhysicsBridgePatch">
            <summary>
            Physics bridge update with transforms for owned rigid bodies.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.PhysicsTranformServerUpload">
            <summary>
            Engine => App
            Payload to update positions to the server at low frequency.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.PhysicsTranformServerUpload.PhysicsTranformServer">
            <summary>
            Physics bridge updates transforms with low frequency on the server.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.OperationResultCode">
            <summary>
            The operation result code for the message payload.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperationResultCode.Success">
            <summary>
            The operation was a success.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperationResultCode.Warning">
            <summary>
            The operation was a success but contained one or more warnings.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperationResultCode.Error">
            <summary>
            The operation was not a success and contained one or more errors.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.ActorComponentType">
            <summary>
            The types of components that can be added to an actor.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.None">
            <summary>
            No subscriptions
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.Transform">
            <summary>
            The transform component flag.
            The app can subscribe to this component.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.Rigidbody">
            <summary>
            The rigid body component flag.
            The app can subscribe to this component.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.Light">
            <summary>
            The light component flag.
            The app cannot subscribe to this component.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.Attachment">
            <summary>
            The attachment component flag.
            The app cannot subscribe to this component.
            reall
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.RigidbodyVelocity">
            <summary>
            The rigid body velocity component flag.
            The app can subscribe to this component and needs to also subscribe to Rigidbody.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.AllSubscriptions">
            <summary>
            All subscribable component flags.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActorComponentType.All">
            <summary>
            All possible component flags.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.OperatingModel">
            <summary>
            The kind of connection we've made with the app. This setting provides a hint to the client about how and when it should send updates to the app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperatingModel.ServerAuthoritative">
            <summary>
            The operating model is one with a single authoritative game server. The client is free to send any updates the app has registered for.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperatingModel.PeerAuthoritative">
            <summary>
            The operating model is one without an authoritative simulation. The client should only send updates if the app has indicated this is the "authoritative" client.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.Traces">
            <summary>
            Payload that contains only traces.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.Handshake">
            <summary>
            The handshake payload from engine to app.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.HandshakeReply">
            <summary>
            The reply to the handshake from app to engine.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.HandshakeReply.SessionId">
            <summary>
            The session id associated with this established runtime session.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.HandshakeReply.OperatingModel">
            <summary>
            The kind of connection this is. <see cref="F:MixedRealityExtension.Messaging.Payloads.HandshakeReply.OperatingModel"/>
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.HandshakeComplete">
            <summary>
            The handshake complete payload.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.OperationResult">
            <summary>
            A payload containing an operation result from the engine to the app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperationResult.ResultCode">
            <summary>
            The result code of the operation.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.OperationResult.Message">
            <summary>
            The message coming along with the operation result.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.MultiOperationResult">
            <summary>
            A payload containing one or more operation results from the engine to the app.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.MultiOperationResult.Results">
            <summary>
            Enumeration of results from an operation.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.EngineToAppRPC">
            <summary>
            A payload containing the remote procedure call that should be invoked from the engine to the app.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.EngineToAppRPC.ChannelName">
            <summary>
            (Optional) The channel this message is targeting. If present, message will be routed to a matching channel handler.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.EngineToAppRPC.ProcName">
            <summary>
            The procedure name to be called.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.EngineToAppRPC.UserId">
            <summary>
            (Optional) The userId sending this message. If present, message will be received on the UserRPC interface.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.EngineToAppRPC.Args">
            <summary>
            The arguments to that procedure call.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.ObjectSpawned">
            <summary>
            A payload containing the operational results of an object spawned command from engine to app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ObjectSpawned.Result">
            <summary>
            The operation result information.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.ObjectSpawned.Actors">
            <summary>
            The enumeration of actors created during the object spawn command operation.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Payloads.ObjectSpawned.Animations">
            <summary>
            The enumeration of animations created during the object spawn.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SyncRequest">
            <summary>
            The payload for the client to request the latest application state (sent during handshake).
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.SyncComplete">
            <summary>
            The payload notifying the client that the application is done synchronizing application state.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.UserJoined">
            <summary>
            The payload containing user information for a user join from engine to app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.UserJoined.User">
            <summary>
            The initial user patch for the user joining the app.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.UserLeft">
            <summary>
            The payload containing the user information for a user leaving from engine to app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.UserLeft.UserId">
            <summary>
            User patch of the user leaving the app.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.ActionPerformed">
            <summary>
            Payload for when an action is performed for a behavior on an actor from engine to app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActionPerformed.UserId">
            <summary>
            The id of the user performing the action.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActionPerformed.TargetId">
            <summary>
            The actor id for the target of the action.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActionPerformed.BehaviorType">
            <summary>
            The type of the behavior from the given behavior category.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActionPerformed.ActionName">
            <summary>
            The name of the action being performed.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActionPerformed.ActionState">
            <summary>
            The state of the action being performed.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.ActionPerformed.ActionData">
            <summary>
            The optional action data to be passed along with the action event.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.CollisionEventRaised">
            <summary>
            Engine => App
            Sends the collision event information to the app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CollisionEventRaised.ActorId">
            <summary>
            The actor id of the collider the event is being raised on.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CollisionEventRaised.EventType">
            <summary>
            The collision event type that is being raised.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.CollisionEventRaised.CollisionData">
            <summary>
            The collision data provided for the collision event.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.TriggerEventRaised">
            <summary>
            Engine => App
            Sends the trigger event information to the app.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.TriggerEventRaised.ActorId">
            <summary>
            The actor id of the collider the event is being raised on.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.TriggerEventRaised.EventType">
            <summary>
            The collision event type that is being raised.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.TriggerEventRaised.OtherActorId">
            <summary>
            The id of the other actor that has caused the trigger event.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.Heartbeat">
            <summary>
            App => Engine, Engine => App
            Measures connection performance (health, latency).
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Messaging.Payloads.Heartbeat.ServerTime">
            <summary>
            The current server clock time as ms since the Unix epoch.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Payloads.HeartbeatReply">
            <summary>
            App => Engine, Engine => App
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Commands.CommandManager.PendingCompletionCallback">
            <summary>
            Ensures a command handler's onCompleteCallback is called exactly once and in a timely manner.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Messaging.Message">
            <summary>
            Represents a message sent and received over a connection.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Message.Id">
            <summary>
            The message unique id.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Message.ReplyToId">
            <summary>
            If this message is a reply, this is the id of the message being replied to.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Messaging.Message.Payload">
            <summary>
            The message payload.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Patching.IPatchable.IsPatched">
            <summary>
            Returns whether this patch has any non-null properties
            </summary>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Patching.IPatchable.WriteToPath(MixedRealityExtension.Animation.TargetPath,Newtonsoft.Json.Linq.JToken,System.Int32)">
            <summary>
            Write a serialized patch part into the specified path
            </summary>
            <param name="path"></param>
            <param name="value"></param>
            <param name="depth"></param>
        </member>
        <member name="M:MixedRealityExtension.Patching.IPatchable.ReadFromPath(MixedRealityExtension.Animation.TargetPath,Newtonsoft.Json.Linq.JToken@,System.Int32)">
            <summary>
            Serialize a part of a patch
            </summary>
            <param name="path"></param>
            <param name="value"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Patching.IPatchable.Clear">
            <summary>
            Reset all patchable properties to null
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Patching.IPatchable.Restore(MixedRealityExtension.Animation.TargetPath,System.Int32)">
            <summary>
            Assign a saved patch instance to public property
            </summary>
            <param name="path">The path whose parts should be restored</param>
            <param name="depth">Which path part should be restored on this object</param>
        </member>
        <member name="M:MixedRealityExtension.Patching.IPatchable.RestoreAll">
            <summary>
            Assign all saved patches to public properties
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Patching.Patchable`1">
            <summary>
            Statically caches reflection info for PatchProperty-tagged properties.
            Note it was necessary to duplicate some code in the ScaledTransform due
            to a lack of multiple inheritance or mixins in C#.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Patching.Patchable`1.IsPatched">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Patching.Patchable`1.WriteToPath(MixedRealityExtension.Animation.TargetPath,Newtonsoft.Json.Linq.JToken,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Patching.Patchable`1.ReadFromPath(MixedRealityExtension.Animation.TargetPath,Newtonsoft.Json.Linq.JToken@,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Patching.Patchable`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Patching.Patchable`1.Restore(MixedRealityExtension.Animation.TargetPath,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Patching.Patchable`1.RestoreAll">
            <inheritdoc/>
        </member>
        <member name="T:MixedRealityExtension.Patching.Types.AnimationPatch">
            <summary>
            A serialized animation definition
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Patching.Types.AnimationPatch.Id">
            <summary>
            Generated unique ID of this animation
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.Name">
            <summary>
            Non-unique name of this animation
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.BasisTime">
            <summary>
            The server time (milliseconds since the UNIX epoch) when the animation was started
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.Time">
            <summary>
            The current playback time, based on basis time and speed
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.Speed">
            <summary>
            Playback speed multiplier
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.Weight">
            <summary>
            When multiple animations play together, this is the relative strength of this instance
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.WrapMode">
            <summary>
            What happens when the animation hits the last frame
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.IsPlaying">
            <summary>
            Convenience property for setting Weight and Basis/Time
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.TargetIds">
            <summary>
            What runtime objects are being animated
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.DataId">
            <summary>
            The ID of the AnimationData bound to this animation
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.AnimationPatch.Duration">
            <summary>
            The length in seconds of the animation
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Patching.Types.MotionType">
            type of the motion that helps on the other side to predict its trajectory
        </member>
        <member name="F:MixedRealityExtension.Patching.Types.MotionType.Dynamic">
            body that is simulated and should react to impacts
        </member>
        <member name="F:MixedRealityExtension.Patching.Types.MotionType.Keyframed">
            body is key framed, has infinite mass used for animation or mouse pick 
        </member>
        <member name="F:MixedRealityExtension.Patching.Types.MotionType.Sleeping">
            special flag to signal that this body is now sleeping and will not move (can become key framed stationary until collision)
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.TransformPatchInfo.Id">
            <summary>
            ID of the actor (of the RB)
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.TransformPatchInfo.motionType">
            the type of the motion
        </member>
        <member name="M:MixedRealityExtension.Patching.Types.PhysicsBridgePatch.DoSendThisPatch">
            returns true if this snapshot should be send even if it has no transforms
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.PhysicsBridgePatch.Id">
            <summary>
            source app id (of the sender)
            </summary>
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.PhysicsBridgePatch.TransformsBLOB">
            <summary>
            Serialized as a string in Json.
            https://www.newtonsoft.com/json/help/html/SerializationGuide.htm
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Patching.Types.PhysicsTranformServerUploadPatch.OneActorUpdate.isEqual(MixedRealityExtension.Patching.Types.PhysicsTranformServerUploadPatch.OneActorUpdate,System.Single)">
            test if the two actor updates are equal
        </member>
        <member name="P:MixedRealityExtension.Patching.Types.PhysicsTranformServerUploadPatch.Id">
            <summary>
            source app id (of the sender)
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Patching.Types.AttachmentPatch">
            <summary>
            Attachment patch.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Patching.Types.TransformPatch.areTransformsEqual(MixedRealityExtension.Patching.Types.TransformPatch,MixedRealityExtension.Patching.Types.TransformPatch,System.Single)">
            tests if 2 transforms equal up to eps if all values are defined and non-null
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.Behaviors.IToolBehavior">
            <summary>
            The interface that represents a tool behavior in the MRE runtime.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.Behaviors.IPenBehavior">
            <summary>
            Interface that represents a pen behavior in the MRE runtime.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.Behaviors.IBehavior">
            <summary>
            The base interface for a behavior.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.Behaviors.IBehavior.Actor">
            <summary>
            The actor that the behavior is attached to.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.Behaviors.IBehavior.CleanUp">
            <summary>
            Called to cleanup the behavior, as it is being removed from the actor by the app.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.Behaviors.IBehaviorFactory">
            <summary>
            This interface serves as the interface to a behavior factory that need to be implemented by the platform utilizing MWI Apps.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.Behaviors.IBehaviorFactory.GetOrCreateTargetBehavior(MixedRealityExtension.Core.Interfaces.IActor,MixedRealityExtension.Behaviors.Contexts.TargetBehaviorContext)">
            <summary>
            Create the concrete behavior that implements the <see cref="T:MixedRealityExtension.PluginInterfaces.Behaviors.ITargetBehavior"/> interface.
            </summary>
            <param name="actor">The actor that the behavior will be attached to.</param>
            /// <param name="context">The target behavior context to operate on.</param>
            <returns>The instance of the behavior implementing the <see cref="T:MixedRealityExtension.PluginInterfaces.Behaviors.ITargetBehavior"/> interface.</returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.Behaviors.IBehaviorFactory.GetOrCreateButtonBehavior(MixedRealityExtension.Core.Interfaces.IActor,MixedRealityExtension.Behaviors.Contexts.ButtonBehaviorContext)">
            <summary>
            Create the concrete behavior that implements the <see cref="T:MixedRealityExtension.PluginInterfaces.Behaviors.IButtonBehavior"/> interface.
            </summary>
            <param name="actor">The actor that the behavior will be attached to.</param>
            <param name="context">The button behavior context to operate on.</param>
            <returns>The instance of the behavior implementing the <see cref="T:MixedRealityExtension.PluginInterfaces.Behaviors.IButtonBehavior"/> interface.</returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.Behaviors.IBehaviorFactory.GetOrCreatePenBehavior(MixedRealityExtension.Core.Interfaces.IActor,MixedRealityExtension.Behaviors.Contexts.PenBehaviorContext)">
            <summary>
            Create the concrete behavior that implements the <see cref="T:MixedRealityExtension.PluginInterfaces.Behaviors.IPenBehavior"/> interface.
            </summary>
            <param name="actor">The actor that the behavior will be attached to.</param>
            /// <param name="context">The pen behavior context to operate on.</param>
            <returns>The instance of the behavior implementing the <see cref="T:MixedRealityExtension.PluginInterfaces.Behaviors.IPenBehavior"/> interface.</returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.Behaviors.IButtonBehavior">
            <summary>
            The interface that represents the button behavior in the target platform for MWI Apps.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.Behaviors.ITargetBehavior">
            <summary>
            The interface that represents the target behavior in the target platform for MWI Apps.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.Behaviors.ITargetBehavior.Grabbable">
            <summary>
            Whether the target is grabbable or not.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.Behaviors.ITargetBehavior.IsGrabbed">
            <summary>
            Whether the target behavior grab is active.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IHostAppUser">
            <summary>
            Interface for providing information about a user.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.IHostAppUser.HostUserId">
            <summary>
            The unobfuscated id of the user for the host app. Handle with care.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.IHostAppUser.Name">
            <summary>
            The user's display name. Null if user not found.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.IHostAppUser.Properties">
            <summary>
            Generic user properties. Usually informational only.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IHostAppUser.GetAttachPoint(System.String)">
            <summary>
            Gets the transform of the specified attach point.
            </summary>
            <param name="attachPointName">The name of the attach point to retrieve.</param>
            <returns>The attach point transform, or null if not found.</returns>
        </member>
        <member name="E:MixedRealityExtension.PluginInterfaces.IHostAppUser.BeforeAvatarDestroyed">
            <summary>
            Called before the user's avatar is destroyed.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.PluginInterfaces.IHostAppUser.AfterAvatarCreated">
            <summary>
            Called after the user's avatar is recreated.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.ILayerApplicator">
            <summary>
            Apply an MRE collider layers to Unity colliders.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.ILayerApplicator.DefaultLayer">
            <summary>
            The Unity layer new actors should be created on.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.ILayerApplicator.ApplyLayerToCollider(System.Nullable{MixedRealityExtension.Core.CollisionLayer},UnityEngine.Collider)">
            <summary>
            Apply a layer to a collider.
            </summary>
            <param name="layer">An MRE collision layer</param>
            <param name="collider">A Unity collider</param>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.ILayerApplicator.DetermineLayerOfCollider(UnityEngine.Collider)">
            <summary>
            Get a collider's layer.
            </summary>
            <param name="collider">The collider.</param>
            <returns>The layer the given collider is on.</returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IPermissionManager">
            <summary>
            Permission management interface for MRE host apps. Supports both IEnumerable and bitfield-based permission lists.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IPermissionManager.PromptForPermissions(System.Uri,System.Collections.Generic.IEnumerable{MixedRealityExtension.Core.Permissions},System.Collections.Generic.IEnumerable{MixedRealityExtension.Core.Permissions},MixedRealityExtension.Core.Permissions,MixedRealityExtension.Core.Permissions,MixedRealityExtension.Core.AppManifest,System.Threading.CancellationToken)">
            <summary>
            Request permissions from the user, and return a Task that resolves with those permissions the user has granted.
            </summary>
            <param name="appLocation">The URI of the MRE requesting permission.</param>
            <param name="permissionsNeeded">An enumerable of the permissions required for the MRE to run.</param>
            <param name="permissionsWanted">An enumerable of the permissions the MRE can use, but are not required.</param>
            <param name="permissionFlagsNeeded">Same as permissionsNeeded, but in a bitfield.</param>
            <param name="permissionFlagsWanted">Same as permissionsWanted, but in a bitfield.</param>
            <param name="appManifest">The full app manifest, which includes enumerations of the required and optional permissions.</param>
            <param name="cancellationToken">Used to cancel the request if it doesn't matter anymore.</param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IPermissionManager.CurrentPermissions(System.Uri)">
            <summary>
            Get the currently granted permissions for the MRE origin without requesting new ones.
            </summary>
            <param name="appLocation">The URI of the MRE that you want to know about.</param>
            <returns>A bitfield of the currently granted permissions for the given MRE.</returns>
        </member>
        <member name="E:MixedRealityExtension.PluginInterfaces.IPermissionManager.OnPermissionDecisionsChanged">
            <summary>
            Event that is fired when any permissions are edited. Receives as arguments the app location URI, the old
            permission set, and the new permission set.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IAssetCache">
            <summary>
            This is a system-wide class instance that is responsible for caching assets beyond the lifetime of a single
            MRE instance. This could possibly be backed by persistent storage instead of memory. This is primarily
            intended for assets loaded via an HTTP request.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.IAssetCache.SupportsSync">
            <summary>
            Specifies whether the cache supports synchronous reads
            </summary>
        </member>
        <member name="P:MixedRealityExtension.PluginInterfaces.IAssetCache.CacheRootGO">
            <summary>
            The GameObject that assets requiring a parent should be put.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.AcquireLoadingLock(System.Uri)">
            <summary>
            Acquire the exclusive right to load this resource, as the client shouldn't be loading multiple copies
            of the same resource. Must call <see cref="M:MixedRealityExtension.PluginInterfaces.IAssetCache.ReleaseLoadingLock(System.Uri)"/> after the cache is populated
            to avoid deadlock.
            </summary>
            <param name="uri">The resource URL.</param>
            <returns>
            A task that completes with `true` if the lock was successfully acquired; `false` otherwise.
            </returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.ReleaseLoadingLock(System.Uri)">
            <summary>
            Release the exclusive loading rights for this resource. Call this after <see cref="M:MixedRealityExtension.PluginInterfaces.IAssetCache.AcquireLoadingLock(System.Uri)"/>.
            </summary>
            <param name="uri">The resource URL.</param>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.StoreAssets(System.Uri,System.Collections.Generic.IEnumerable{UnityEngine.Object},System.String)">
            <summary>
            If either the cache contains no assets for the resource, or the cached
            version is older than what is provided, this method stores all provided assets in the cache, overwriting
            any currently cached assets, and sets the reference count to the number of assets. Otherwise, the internal
            reference counter for this resource is decremented by the number of provided assets.
            </summary>
            <param name="uri">The resource identifier</param>
            <param name="assets">The collection of assets generated from the given resource</param>
            <param name="version">
            The version of the loaded resource. Will typically be the HTTP response's ETag header.
            </param>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.LeaseAssets(System.Uri,System.String)">
            <summary>
            Asynchronously return the cached assets at the given URI, and increment the internal reference counter
            for this resource. Will return null if no assets are cached for that resource, or if ifMatchesVersion
            does not match the stored assets' version. This should be async in case the asset needs to be loaded
            from persistent storage.
            </summary>
            <param name="uri">The resource identifier</param>
            <param name="ifMatchesVersion">Return null if the cached assets are not of this version</param>
            <returns>A task that completes with the cached assets, or null if no assets are cached.</returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.LeaseAssetsSync(System.Uri,System.String)">
            <summary>
            Same as <see cref="M:MixedRealityExtension.PluginInterfaces.IAssetCache.LeaseAssets(System.Uri,System.String)"/>, but is only valid if <see cref="P:MixedRealityExtension.PluginInterfaces.IAssetCache.SupportsSync"/> is true.
            </summary>
            <param name="uri">The resource identifier</param>
            <param name="ifMatchesVersion">Return null if the cached assets are not of this version</param>
            <returns>The cached assets, or null if no assets are cached.</returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.TryGetVersion(System.Uri)">
            <summary>
            Returns the stored version of the given resource, or null if not cached. We'll need this for If-Not-Match
            HTTP headers.
            </summary>
            <param name="uri">The resource identifier.</param>
            <returns>
            A task that completes with the version string of the cached assets, or null if nothing is cached.
            </returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IAssetCache.TryGetVersionSync(System.Uri)">
            <summary>
            Same as <see cref="M:MixedRealityExtension.PluginInterfaces.IAssetCache.TryGetVersion(System.Uri)"/>, but is only valid if <see cref="P:MixedRealityExtension.PluginInterfaces.IAssetCache.SupportsSync"/> is true.
            </summary>
            <param name="uri">The resource identifier.</param>
            <returns>
            The version string of the cached assets, or null if nothing is cached.
            </returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IGLTFImporterFactory">
            <summary>
            Used to generate new GLTFSceneImporter instances. Primarily used for inserting custom subclasses of this type.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IGLTFImporterFactory.CreateImporter(System.String,UnityGLTF.Loader.IDataLoader,UnityGLTF.AsyncCoroutineHelper)">
            <summary>
            Returns a new glTF importer to the MRE system. Will typically be a subclass instance, and not a direct instance.
            </summary>
            <param name="gltfFileName"></param>
            <param name="dataLoader"></param>
            <param name="asyncCoroutineHelper"></param>
            <returns>A new importer instance.</returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IGLTFImporterFactory.CreateImporter(GLTF.Schema.GLTFRoot,UnityGLTF.Loader.IDataLoader,UnityGLTF.AsyncCoroutineHelper,System.IO.Stream)">
            <summary>
            Returns a new glTF importer to the MRE system. Will typically be a subclass instance, and not a direct instance.
            </summary>
            <param name="rootNode"></param>
            <param name="dataLoader"></param>
            <param name="asyncCoroutineHelper"></param>
            <param name="gltfStream"></param>
            <returns></returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.ILibraryResourceFactory">
            <summary>
            A factory class that creates actors from host library resources
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.ILibraryResourceFactory.CreateFromLibrary(System.String,UnityEngine.GameObject)">
            <summary>
            Instantiate a host-defined actor by resource ID. Will throw an ArgumentException if the resourceId is not recognized.
            </summary>
            <param name="resourceId">A string that uniquely identifies a library resource to the host app</param>
            <param name="parent">The Unity GameObject to attach the library object to</param>
            <returns>An async task that will resolve with the spawned GameObject</returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IMaterialPatcher">
            <summary>
            Responsible for translating between the host's material properties and the API properties
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IMaterialPatcher.ApplyMaterialPatch(MixedRealityExtension.App.IMixedRealityExtensionApp,UnityEngine.Material,MixedRealityExtension.Assets.Material)">
            <summary>
            Apply the patch from the app to the material
            </summary>
            <param name="app">The app context of the material</param>
            <param name="material">An instance of the default MRE material provided on load</param>
            <param name="patch">The update from the app. Unmodified properties will be null.</param>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IMaterialPatcher.GeneratePatch(MixedRealityExtension.App.IMixedRealityExtensionApp,UnityEngine.Material)">
            <summary>
            Generate an API patch from the Unity material's current state
            </summary>
            <param name="app">The app context of the material</param>
            <param name="material">An instance of the default MRE material provided on load</param>
            <returns>A full definition of the given material</returns>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IMaterialPatcher.UsesTexture(MixedRealityExtension.App.IMixedRealityExtensionApp,UnityEngine.Material,UnityEngine.Texture)">
            <summary>
            Reports whether a particular Unity texture is in use by the given material
            </summary>
            <param name="app">The app context of the material</param>
            <param name="material">The material to test</param>
            <param name="texture">The texture to test</param>
            <returns></returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IMRELogger">
            <summary>
            Interface that represents a logger for the MRE SDK.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IMRELogger.LogDebug(System.String)">
            <summary>
            Log a debug message.
            </summary>
            <param name="message">The debug message.</param>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IMRELogger.LogWarning(System.String)">
            <summary>
            Log a warning.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IMRELogger.LogError(System.String)">
            <summary>
            Log an error.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.ITextFactory">
            <summary>
            Classes that implement this interface can be used to generate engine instances of text components
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.ITextFactory.CreateText(MixedRealityExtension.Core.Interfaces.IActor)">
            <summary>
            Generate engine text on the given actor with the given properties
            </summary>
            <param name="actor">The actor acting as anchor</param>
            <returns>An engine-specific reference to the created text</returns>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IVideoPlayerFactory">
            <summary>
            A factory class that instantiates a video player
            </summary>
        </member>
        <member name="T:MixedRealityExtension.PluginInterfaces.IPrimitiveFactory">
            <summary>
            Classes that implement this interface can be used to generate engine primitives
            </summary>
        </member>
        <member name="M:MixedRealityExtension.PluginInterfaces.IPrimitiveFactory.CreatePrimitive(MixedRealityExtension.Core.Types.PrimitiveDefinition)">
            <summary>
            Create a new Unity mesh with a known shape
            </summary>
            <param name="definition">The shape and size of the primitive to create</param>
            <returns>The mesh of the newly created primitive</returns>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCInterface">
            <summary>
            Class that represents the remote procedure call interface for the MRE interop library.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCInterface.OnReceive(System.String,MixedRealityExtension.RPC.RPCHandlerBase)">
            <summary>
            Registers and RPC handler for the specific procedure name
            </summary>
            <param name="procName">The name of the remote procedure.</param>
            <param name="handler">The handler to be called when an RPC call is received for the given procedure name.</param>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCInterface.SendRPC(System.String,System.Object[])">
            <summary>
            Sends an RPC message to the app with the given name and arguments.
            </summary>
            <param name="procName">The name of the remote procedure call.</param>
            <param name="args">The arguments for the remote procedure call.</param>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCInterface.SendRPC(System.String,System.String,System.String,System.Object[])">
            <summary>
            Sends an RPC message to the app with the given name and arguments.
            </summary>
            <param name="channelName">The name of the channel of this remote procedure call.</param>
            <param name="procName">The name of the remote procedure call.</param>
            <param name="userId">The id of the user this rpc call is targeting.</param>
            <param name="args">The arguments for the remote procedure call.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandlerBase">
            <summary>
            Base class for all RPC handlers.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler">
            <summary>
            Class that serves as an RPC handler for a procedure that takes no arguments.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler.#ctor(System.Action)">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler.Execute(Newtonsoft.Json.Linq.JToken[])">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`1">
            <summary>
            Class that serves as an RPC handler for a procedure that takes one arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`1.#ctor(System.Action{`0})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`1"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`2">
            <summary>
            Class that serves as an RPC handler for a procedure that takes two arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`2.#ctor(System.Action{`0,`1})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`2"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`3">
            <summary>
            Class that serves as an RPC handler for a procedure that takes three arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
            <typeparam name="ArgT3">The type of the third argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`3.#ctor(System.Action{`0,`1,`2})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`3"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`4">
            <summary>
            Class that serves as an RPC handler for a procedure that takes four arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
            <typeparam name="ArgT3">The type of the third argument.</typeparam>
            <typeparam name="ArgT4">The type of the fourth argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`4.#ctor(System.Action{`0,`1,`2,`3})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`4"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`5">
            <summary>
            Class that serves as an RPC handler for a procedure that takes five arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
            <typeparam name="ArgT3">The type of the third argument.</typeparam>
            <typeparam name="ArgT4">The type of the fourth argument.</typeparam>
            <typeparam name="ArgT5">The type of the fifth argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`5.#ctor(System.Action{`0,`1,`2,`3,`4})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`5"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`6">
            <summary>
            Class that serves as an RPC handler for a procedure that takes six arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
            <typeparam name="ArgT3">The type of the third argument.</typeparam>
            <typeparam name="ArgT4">The type of the fourth argument.</typeparam>
            <typeparam name="ArgT5">The type of the fifth argument.</typeparam>
            <typeparam name="ArgT6">The type of the sixth argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`6.#ctor(System.Action{`0,`1,`2,`3,`4,`5})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`6"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`7">
            <summary>
            Class that serves as an RPC handler for a procedure that takes seven arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
            <typeparam name="ArgT3">The type of the third argument.</typeparam>
            <typeparam name="ArgT4">The type of the fourth argument.</typeparam>
            <typeparam name="ArgT5">The type of the fifth argument.</typeparam>
            <typeparam name="ArgT6">The type of the sixth argument.</typeparam>
            <typeparam name="ArgT7">The type of the seventh argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`7.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`7"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="T:MixedRealityExtension.RPC.RPCHandler`8">
            <summary>
            Class that serves as an RPC handler for a procedure that takes eight arguments.
            </summary>
            <typeparam name="ArgT1">The type of the first argument.</typeparam>
            <typeparam name="ArgT2">The type of the second argument.</typeparam>
            <typeparam name="ArgT3">The type of the third argument.</typeparam>
            <typeparam name="ArgT4">The type of the fourth argument.</typeparam>
            <typeparam name="ArgT5">The type of the fifth argument.</typeparam>
            <typeparam name="ArgT6">The type of the sixth argument.</typeparam>
            <typeparam name="ArgT7">The type of the seventh argument.</typeparam>
            <typeparam name="ArgT8">The type of the eighth argument.</typeparam>
        </member>
        <member name="M:MixedRealityExtension.RPC.RPCHandler`8.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Initializes an instance of the class <see cref="T:MixedRealityExtension.RPC.RPCHandler`8"/>
            </summary>
            <param name="action">The action to perform when the RPC is being executed.</param>
        </member>
        <member name="F:MixedRealityExtension.Constants.UnversionedAssetVersion">
            <summary>
            If we load an asset, and the server response does not contain an ETag, this is the asset's version
            </summary>
        </member>
        <member name="T:MixedRealityExtension.API.MREAPI">
            <summary>
            Static class that serves as the Mixed Reality Extension SDK API.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.API.MREAPI.InitializeAPI(UnityEngine.Material,MixedRealityExtension.PluginInterfaces.ILayerApplicator,MixedRealityExtension.PluginInterfaces.IAssetCache,MixedRealityExtension.PluginInterfaces.ITextFactory,MixedRealityExtension.PluginInterfaces.IPermissionManager,MixedRealityExtension.PluginInterfaces.Behaviors.IBehaviorFactory,MixedRealityExtension.PluginInterfaces.IDialogFactory,MixedRealityExtension.PluginInterfaces.ILibraryResourceFactory,MixedRealityExtension.PluginInterfaces.IVideoPlayerFactory,MixedRealityExtension.PluginInterfaces.IPrimitiveFactory,MixedRealityExtension.PluginInterfaces.IGLTFImporterFactory,MixedRealityExtension.PluginInterfaces.IMaterialPatcher,MixedRealityExtension.PluginInterfaces.IMRELogger)">
            <summary>
            Initializes the Mixed Reality Extension SDK API.
            </summary>
            <param name="defaultMaterial">The material template used for all SDK-spawned meshes.</param>
            <param name="layerApplicator">The class used to apply MRE layers to Unity colliders.</param>
            <param name="assetCache">The class responsible for long-term asset caching.</param>
            <param name="textFactory">The text factory to use within the runtime.</param>
            <param name="permissionManager">The instance responsible for presenting users with permission requests.</param>
            <param name="behaviorFactory">The behavior factory to use within the runtime.</param>
            <param name="dialogFactory"></param>
            <param name="libraryFactory">The library resource factory to use within the runtime.</param>
            <param name="videoPlayerFactory"></param>
            <param name="primitiveFactory">The primitive factory to use within the runtime.</param>
            <param name="gltfImporterFactory">The glTF loader factory. Uses default GLTFSceneImporter if omitted.</param>
            <param name="materialPatcher">Overrides default material property map (color and mainTexture only).</param>
            <param name="userInfoProvider">Provides appId/sessionId scoped IUserInfo instances.</param>
            <param name="logger">The logger to be used by the MRE SDK.</param>
        </member>
        <member name="P:MixedRealityExtension.API.MREAPI.AppsAPI">
            <summary>
            Gets the apps API for the Mixed Reality Extension SDK.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.API.MREAPI.Logger">
            <summary>
            Gets the logger to use within the MRE SDK.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.API.MREAppsAPI">
            <summary>
            Class that contains the mixed reality extension application API.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.API.MREAppsAPI.DefaultMaterial">
            <summary>
            The material template used for all SDK-spawned materials.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.API.MREAppsAPI.LayerApplicator">
            <summary>
            The class responsible for assigning layers to colliders.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.API.MREAppsAPI.AssetCache">
            <summary>
            The class responsible for long-term asset caching.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.API.MREAppsAPI.CreateMixedRealityExtensionApp(UnityEngine.MonoBehaviour,System.String,System.String)">
            <summary>
            Creates a new mixed reality extension app and adds it to the MRE runtime.
            </summary>
            <param name="ownerScript">The owner unity script for the app.</param>
            <param name="ephemeralAppId">A unique identifier for the MRE behind this instance's URL, in the absence
            of a global app ID. Used for generating user IDs that are consistent within this session across clients,
            but not reliable across time. Must be synchronized across all clients in this session, and must be
            periodically rotated.</param>
            <param name="globalAppId">A unique identifier for the MRE behind this instance's URL. Used for generating
            consistent user IDs for this MRE. Would typically come from an app registry or similar. If supplied, must
            be synchronized across all clients in this session.
            </param>
            <returns>Returns the newly created mixed reality extension app.</returns>
        </member>
        <member name="M:MixedRealityExtension.API.MREAppsAPI.RemoveApp(MixedRealityExtension.App.IMixedRealityExtensionApp)">
            <summary>
            Removes the app from the runtime.
            </summary>
            <param name="app">The app to remove.</param>
        </member>
        <member name="M:MixedRealityExtension.API.MREAppsAPI.GetApp(System.Guid)">
            <summary>
            Get the <see cref="T:MixedRealityExtension.App.IMixedRealityExtensionApp"/> app that has the given app ID.
            </summary>
            <param name="id">The ID of the app to get.</param>
            <returns>The app with the given ID.</returns>
        </member>
        <member name="T:MixedRealityExtension.App.IMixedRealityExtensionApp">
            <summary>
            Interface that represents the instance of an app running in the Mixed Reality Extension application.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnWaitingForPermission">
            <summary>
            Event that is raised just before this app makes its permissions request to the <see cref="T:MixedRealityExtension.PluginInterfaces.IPermissionManager"/>.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnPermissionDenied">
            <summary>
            Event that is raised when a permission required to run the app is denied by the host. Will be immediately
            followed by <see cref="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnAppShutdown"/>.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnConnecting">
            <summary>
            Event that is raised when the mixed reality extension app has connected to the app.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnConnectFailed">
            <summary>
            Event that is raised when the attempt to connect to the mixed reality extension app fails.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnConnected">
            <summary>
            Event that is raised when the mixed reality extension app has connected to the app.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnDisconnected">
            <summary>
            Event that is raised when the mixed reality extension app has been disconnected from the app.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnAppStarted">
            <summary>
            Event that is raised when the mixed reality extension app has started up.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnAppShutdown">
            <summary>
            Event that is raised when the mixed reality extension app has been shutdown.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnActorCreated">
            <summary>
            Event that is raised when the app runtime has created a new actor.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnUserJoined">
            <summary>
            Event that is raised when the local user joins the MRE application. Is passed the user and a boolean
            indicating whether the user joined from the local client, or from a remote client.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.IMixedRealityExtensionApp.OnUserLeft">
            <summary>
            Event that is raised when the local user leaves the MRE application. Is passed the user and a boolean
            indicating whether the user left from the local client, or from a remote client.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.GlobalAppId">
            <summary>
            A string uniquely identifying the MRE behind the server URL. Used for generating consistent user IDs when
            user tracking is enabled.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.EphemeralAppId">
            <summary>
            A string uniquely identifying the MRE instance in the shared space across all clients. Used for generating
            user IDs when user tracking is disabled.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.SessionId">
            <summary>
            Gets the session id of the mixed reality extension app.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.LocalUser">
            <summary>
            Gets the local user. Will be null if the local client has not joined as a user.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.IsActive">
            <summary>
            Gets whether the mixed reality extension app has been started.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.ServerUri">
            <summary>
            The URI of the MRE server. Only valid after `Startup` has been called.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.SceneRoot">
            <summary>
            The game object that serves as the scene root.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.AssetManager">
            <summary>
            Where assets for this app instance are stored
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.RPC">
            <summary>
            The RPC interface for registering handlers and invoking remote procedure calls.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.RPCChannels">
            <summary>
            The RPC interface for registering channel handlers for invoking remote procedure calls.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.IMixedRealityExtensionApp.Logger">
            <summary>
            Gets the logger to use within the MRE SDK.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.Startup(System.String,System.String)">
            <summary>
            Connect the mixed reality extension app to the given url with the given session id.
            <param name="url">The url to connect to for the app.</param>
            <param name="sessionId">The session id of the app.</param>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.Shutdown">
            <summary>
            Called to shut down the engine mixed reality extension app by the app process.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.FixedUpdate">
            <summary>
            Update keyframed rigid bodies.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.Update">
            <summary>
            Update the remote app runtime.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.UserJoin(UnityEngine.GameObject,MixedRealityExtension.PluginInterfaces.IHostAppUser,System.Boolean)">
            <summary>
            User is joining the app.
            </summary>
            <param name="userGO">The game object that serves as the user in unity.</param>
            <param name="hostAppUser">Interface for providing a representation of the host app user.</param>
            <param name="isLocalUser">Indicates whether this user originates on this client, or is a local representation of a remote user.</param>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.UserLeave(UnityEngine.GameObject)">
            <summary>
            User is leaving the app.
            </summary>
            <param name="userGO">The game object that serves as the user in unity.</param>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.IsInteractableForUser(MixedRealityExtension.Core.Interfaces.IUser)">
            <summary>
            Gets whether this app is interactable for the given user.
            </summary>
            <param name="user">The user to check interactability for.</param>
            <returns>Whether the app is interactable for the given user.</returns>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.FindActor(System.Guid)">
            <summary>
            Find an actor with the given id or null if none exists.
            </summary>
            <param name="id">The id of the actor.</param>
            <returns>The actor with the given id in this app or null if none exists.</returns>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.OnActorDestroyed(System.Guid)">
            <summary>
            Callback from the engine when an actor is being destroyed from within the engine runtime.
            </summary>
            <param name="actorId"></param>
        </member>
        <member name="M:MixedRealityExtension.App.IMixedRealityExtensionApp.DeclarePreallocatedActors(UnityEngine.GameObject[],System.String)">
            <summary>
            Declare pre-allocated game objects as MRE actors. Note: Since these actors are not created via an MRE message, the app has
            no means to create them on clients that have not preallocated them. Thus cross-host compatibility will be reduced for these actors.
            </summary>
            <param name="objects">An array of GameObjects that this MRE should be aware of. GameObjects cannot already be owned by an MRE.</param>
            <param name="guidSeed">The seed for generating the new actors' IDs. Must be the same value across all clients
            in the session for this batch of actors, or the preallocated actors will not synchronize correctly. Must be unique for this MRE session.
            </param>
            <exception cref="T:System.Exception">Thrown when the app is not in the Started state.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value of the guidSeed argument has already been used this session.</exception>
        </member>
        <member name="F:MixedRealityExtension.App.MixedRealityExtensionApp.AppState.WaitingForPermission">
            <summary>
            Startup has been called, but we might be waiting for permission to run.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnWaitingForPermission">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnPermissionDenied">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnConnecting">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnConnectFailed">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnConnected">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnDisconnected">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnAppStarted">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnAppShutdown">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnActorCreated">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnUserJoined">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.App.MixedRealityExtensionApp.OnUserLeft">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.GlobalAppId">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.SessionId">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.IsActive">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.ServerUri">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.ServerAssetUri">
            <summary>
            Same as ServerUri, but with ws(s): substituted for http(s):
            </summary>
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.SceneRoot">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.LocalUser">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.RPC">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.App.MixedRealityExtensionApp.RPCChannels">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.#ctor(System.String,System.String,UnityEngine.MonoBehaviour,MixedRealityExtension.PluginInterfaces.IMRELogger)">
            <summary>
            Initializes a new instance of the class <see cref="T:MixedRealityExtension.App.MixedRealityExtensionApp"/>
            </summary>
            <param name="globalAppId">A string uniquely identifying the MRE behind the server URL. Used for generating
            consistent user IDs when user tracking is enabled.</param>
            <param name="ephemeralAppId">A string uniquely identifying the MRE instance in the shared space across
            all clients. Used for generating user IDs when user tracking is disabled.</param>
            <param name="ownerScript">The owner mono behaviour script for the app.</param>
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.Startup(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.Disconnect">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.Shutdown">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.FixedUpdate">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.Update">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.UserJoin(UnityEngine.GameObject,MixedRealityExtension.PluginInterfaces.IHostAppUser,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.UserLeave(UnityEngine.GameObject)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.IsInteractableForUser(MixedRealityExtension.Core.Interfaces.IUser)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.FindActor(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.OnActorDestroyed(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.DeclarePreallocatedActors(UnityEngine.GameObject[],System.String)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.ProcessActorCommand(System.Guid,MixedRealityExtension.Messaging.Payloads.NetworkCommandPayload,System.Action)">
            <summary>
            Used to set actor parents when the parent is pending
            </summary>
        </member>
        <member name="M:MixedRealityExtension.App.MixedRealityExtensionApp.DisableUserInteration(MixedRealityExtension.Core.Interfaces.IUser)">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.LookAtMode">
            <summary>
            What is the actor facing?
            </summary>
        </member>
        <member name="F:MixedRealityExtension.LookAtMode.None">
            <summary>
            The actor's orientation is determined entirely by its transform
            </summary>
        </member>
        <member name="F:MixedRealityExtension.LookAtMode.TargetY">
            <summary>
            The actor rotates on its Y axis to point toward the target
            </summary>
        </member>
        <member name="F:MixedRealityExtension.LookAtMode.TargetXY">
            <summary>
            The actor rotates on its X and Y axes to point toward the target
            </summary>
        </member>
        <member name="T:MixedRealityExtension.IPC.MWEventHandler">
            <summary>
            Event handler type with no arguments.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.IPC.MWEventHandler`1">
            <summary>
            Event handler type with an argument.
            </summary>
            <typeparam name="ArgsT"></typeparam>
            <param name="args"></param>
        </member>
        <member name="T:MixedRealityExtension.IPC.MWEventHandler`2">
            <summary>
            Event handler type with two arguments.
            </summary>
            <typeparam name="ArgsT"></typeparam>
            <typeparam name="ArgsU"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:MixedRealityExtension.IPC.ConnectFailedReason">
            <summary>
            The set of possible reason codes passed to the OnConnectFailed event.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.IPC.ConnectFailedReason.ConnectionFailed">
            <summary>
            The connection failed to establish.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.IPC.ConnectFailedReason.UnsupportedProtocol">
            <summary>
            The connection was refused due to a protocol version mismatch.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.IPC.IConnection">
            <summary>
            Interface representing a connection.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.IConnection.OnConnecting">
            <summary>
            Invoked before the connection attempt is initiated.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.IConnection.OnConnectFailed">
            <summary>
            Invoked after the connection attempt failed.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.IConnection.OnConnected">
            <summary>
            Invoked after the connection attempt succeeds.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.IConnection.OnDisconnected">
            <summary>
            Invoked after the connection has been closed.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.IConnection.OnReceive">
            <summary>
            Invoked after the connection receives a message;
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.IConnection.OnError">
            <summary>
            Invoked when an error occurred on the connection.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.IPC.IConnection.IsActive">
            <summary>
            Returns true if the connection is in an active state (i.e. if Open has been called).
            </summary>
        </member>
        <member name="M:MixedRealityExtension.IPC.IConnection.Open">
            <summary>
            Opens the connection.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.IPC.IConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.IPC.IConnection.Send(MixedRealityExtension.Messaging.Message)">
            <summary>
            Sends a message to the remote endpoint.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="T:MixedRealityExtension.IPC.Connections.WebSocket">
            <summary>
            Class representing a WebSocket connection.
            </summary>
        </member>
        <member name="E:MixedRealityExtension.IPC.Connections.WebSocket.OnConnecting">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.IPC.Connections.WebSocket.OnConnectFailed">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.IPC.Connections.WebSocket.OnConnected">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.IPC.Connections.WebSocket.OnDisconnected">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.IPC.Connections.WebSocket.OnError">
            <inheritdoc />
        </member>
        <member name="E:MixedRealityExtension.IPC.Connections.WebSocket.OnReceive">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.IPC.Connections.WebSocket.IsActive">
            <inheritdoc />
        </member>
        <member name="P:MixedRealityExtension.IPC.Connections.WebSocket.Url">
            <summary>
            Gets or sets the Url this WebSocket should connect to.
            </summary>
        </member>
        <member name="P:MixedRealityExtension.IPC.Connections.WebSocket.Headers">
            <summary>
            Gets or sets the headers that will be sent in the connect request.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.IPC.Connections.WebSocket.Open">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.IPC.Connections.WebSocket.Close">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.IPC.Connections.WebSocket.Send(MixedRealityExtension.Messaging.Message)">
            <inheritdoc />
        </member>
        <member name="M:MixedRealityExtension.IPC.Connections.WebSocket.Dispose">
            <inheritdoc />
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.ArrayE">
            <summary>
            Array extensions
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.NextOrFirst``1(System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Gets the next or the first node in the <see cref="T:System.Collections.Generic.LinkedList`1"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.PreviousOrLast``1(System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Gets the previous or the last node in the <see cref="T:System.Collections.Generic.LinkedList`1"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.GetLooped``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Looped indexer getter, allows out of bounds indices
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.SetLooped``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            Looped indexer setter, allows out of bounds indices, ignores IList.IsReadOnly
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.IsInBounds``1(``0[0:,0:],UnityEngine.Vector2Int)">
            <summary>
            Checks if <paramref name="vector"/> is within array bounds
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.IsInBounds``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Checks if <paramref name="x"/> and <paramref name="y"/> are within array bounds
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.FloodVisit4``1(``0[0:,0:],UnityEngine.Vector2Int,System.Action{System.Int32,System.Int32},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Visits all connected elements with the same value as the start element
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Flood_fill
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.FloodVisit4``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Visits all connected elements with the same value as the start element
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Flood_fill
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.FloodVisit8``1(``0[0:,0:],UnityEngine.Vector2Int,System.Action{System.Int32,System.Int32},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Visits all connected elements with the same value as the start element
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Flood_fill
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.FloodVisit8``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Visits all connected elements with the same value as the start element
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Flood_fill
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit4``1(``0[0:,0:],UnityEngine.Vector2Int,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits four cells orthogonally surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Von_Neumann_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit4``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits four cells orthogonally surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Von_Neumann_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit4Unbounded``1(``0[0:,0:],UnityEngine.Vector2Int,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits four cells orthogonally surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Von_Neumann_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit4Unbounded``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits four cells orthogonally surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Von_Neumann_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit8``1(``0[0:,0:],UnityEngine.Vector2Int,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits eight cells surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Moore_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit8``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits eight cells surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Moore_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit8Unbounded``1(``0[0:,0:],UnityEngine.Vector2Int,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits eight cells surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Moore_neighborhood
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.ArrayE.Visit8Unbounded``1(``0[0:,0:],System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Visits eight cells surrounding the center cell
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Moore_neighborhood
            </remarks>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft">
            <summary>
            Helper class for mesh generation supporting large meshes and submeshes
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Clear">
            <summary>
            Clears all vertex data and all triangle indices
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Move(UnityEngine.Vector3)">
            <summary>
            Moves draft vertices by <paramref name="vector"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Rotate(UnityEngine.Quaternion)">
            <summary>
            Rotates draft vertices by <paramref name="rotation"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Scale(System.Single)">
            <summary>
            Scales draft vertices uniformly by <paramref name="scale"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Scale(UnityEngine.Vector3)">
            <summary>
            Scales draft vertices non-uniformly by <paramref name="scale"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Paint(UnityEngine.Color)">
            <summary>
            Paints draft vertices with <paramref name="color"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.FlipFaces">
            <summary>
            Flips draft faces
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.FlipTriangles">
            <summary>
            Reverses the winding order of draft triangles
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.FlipNormals">
            <summary>
            Reverses the direction of draft normals
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.FlipUVHorizontally(System.Int32)">
            <summary>
            Flips the UV map horizontally in the selected <paramref name="channel"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.FlipUVVertically(System.Int32)">
            <summary>
            Flips the UV map vertically in the selected <paramref name="channel"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.Spherify(System.Single,UnityEngine.Vector3)">
            <summary>
            Projects vertices on a sphere with the given <paramref name="radius"/> and <paramref name="center"/>, recalculates normals
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.ToMeshWithSubMeshes(System.Boolean,System.Boolean)">
            <summary>
            Creates a new mesh from the data in the draft
            </summary>
            <param name="calculateBounds"> Calculate the bounding box of the Mesh after setting the triangles. </param>
            <param name="autoIndexFormat"> Use 16 bit or 32 bit index buffers based on vertex count. </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.CompoundMeshDraft.ToMeshWithSubMeshes(UnityEngine.Mesh@,System.Boolean,System.Boolean)">
            <summary>
            Fills the <paramref name="mesh"/> with the data in the draft
            </summary>
            <param name="mesh"> Resulting mesh. Cleared before use. </param>
            <param name="calculateBounds"> Calculate the bounding box of the Mesh after setting the triangles. </param>
            <param name="autoIndexFormat"> Use 16 bit or 32 bit index buffers based on vertex count. </param>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Directions">
            <summary>
            Specifies directions along thee axes
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Circle2">
            <summary>
            Representation of a 2D circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Circle2.GetPoint(System.Single)">
            <summary>
            Returns a point on the circle at the given <paramref name="angle"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Circle2.Lerp(MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.Circle2,System.Single)">
            <summary>
            Linearly interpolates between two circles
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Circle2.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.Circle2,System.Single)">
            <summary>
            Linearly interpolates between two circles without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Circle3">
            <summary>
            Representation of a 3D circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Circle3.Lerp(MixedRealityExtension.ProceduralToolkit.Circle3,MixedRealityExtension.ProceduralToolkit.Circle3,System.Single)">
            <summary>
            Linearly interpolates between two circles
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Circle3.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Circle3,MixedRealityExtension.ProceduralToolkit.Circle3,System.Single)">
            <summary>
            Linearly interpolates between two circles without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Closest">
            <summary>
            Collection of closest point(s) algorithms
            </summary>
            <summary>
            Collection of closest point(s) algorithms
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Line2)">
            <summary>
            Projects the point onto the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Line2,System.Single@)">
            <summary>
            Projects the point onto the line
            </summary>
            <param name="projectedX">Position of the projected point on the line relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Projects the point onto the line
            </summary>
            <param name="lineDirection">Normalized direction of the line</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single@)">
            <summary>
            Projects the point onto the line
            </summary>
            <param name="lineDirection">Normalized direction of the line</param>
            <param name="projectedX">Position of the projected point on the line relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector2,UnityEngine.Ray2D)">
            <summary>
            Projects the point onto the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector2,UnityEngine.Ray2D,System.Single@)">
            <summary>
            Projects the point onto the ray
            </summary>
            <param name="projectedX">Position of the projected point on the ray relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Projects the point onto the ray
            </summary>
            <param name="rayDirection">Normalized direction of the ray</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single@)">
            <summary>
            Projects the point onto the ray
            </summary>
            <param name="rayDirection">Normalized direction of the ray</param>
            <param name="projectedX">Position of the projected point on the ray relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Projects the point onto the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Segment2,System.Single@)">
            <summary>
            Projects the point onto the segment
            </summary>
            <param name="projectedX">Normalized position of the projected point on the segment. 
            Value of zero means that the projected point coincides with segment.a. 
            Value of one means that the projected point coincides with segment.b.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Projects the point onto the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single@)">
            <summary>
            Projects the point onto the segment
            </summary>
            <param name="projectedX">Normalized position of the projected point on the segment. 
            Value of zero means that the projected point coincides with <paramref name="segmentA"/>. 
            Value of one means that the projected point coincides with <paramref name="segmentB"/>.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointCircle(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Projects the point onto the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointCircle(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Projects the point onto the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineLine(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Line2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineRay(MixedRealityExtension.ProceduralToolkit.Line2,UnityEngine.Ray2D,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineSegment(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Segment2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineCircle(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Circle2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RayRay(UnityEngine.Ray2D,UnityEngine.Ray2D,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RayRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RaySegment(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Segment2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RaySegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RayCircle(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Circle2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RayCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SegmentSegment(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Segment2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SegmentSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SegmentCircle(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Circle2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SegmentCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.CircleCircle(MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.Circle2,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the circles
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.CircleCircle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,UnityEngine.Vector2@,UnityEngine.Vector2@)">
            <summary>
            Finds closest points on the circles
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Line3)">
            <summary>
            Projects the point onto the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Line3,System.Single@)">
            <summary>
            Projects the point onto the line
            </summary>
            <param name="projectedX">Position of the projected point on the line relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Projects the point onto the line
            </summary>
            <param name="lineDirection">Normalized direction of the line</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@)">
            <summary>
            Projects the point onto the line
            </summary>
            <param name="lineDirection">Normalized direction of the line</param>
            <param name="projectedX">Position of the projected point on the line relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector3,UnityEngine.Ray)">
            <summary>
            Projects the point onto the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector3,UnityEngine.Ray,System.Single@)">
            <summary>
            Projects the point onto the ray
            </summary>
            <param name="projectedX">Position of the projected point on the ray relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Projects the point onto the ray
            </summary>
            <param name="rayDirection">Normalized direction of the ray</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@)">
            <summary>
            Projects the point onto the ray
            </summary>
            <param name="rayDirection">Normalized direction of the ray</param>
            <param name="projectedX">Position of the projected point on the ray relative to the origin</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Segment3)">
            <summary>
            Projects the point onto the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Segment3,System.Single@)">
            <summary>
            Projects the point onto the segment
            </summary>
            <param name="projectedX">Normalized position of the projected point on the segment. 
            Value of zero means that the projected point coincides with segment.a. 
            Value of one means that the projected point coincides with segment.b.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Projects the point onto the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@)">
            <summary>
            Projects the point onto the segment
            </summary>
            <param name="projectedX">Normalized position of the projected point on the segment. 
            Value of zero means that the projected point coincides with <paramref name="segmentA"/>. 
            Value of one means that the projected point coincides with <paramref name="segmentB"/>.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSphere(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Projects the point onto the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.PointSphere(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Projects the point onto the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineSphere(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Sphere,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.LineSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RaySphere(UnityEngine.Ray,MixedRealityExtension.ProceduralToolkit.Sphere,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.RaySphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SegmentSphere(MixedRealityExtension.ProceduralToolkit.Segment3,MixedRealityExtension.ProceduralToolkit.Sphere,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SegmentSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SphereSphere(MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.Sphere,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the spheres
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Closest.SphereSphere(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            Finds closest points on the spheres
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Distance">
            <summary>
            Collection of distance calculation algorithms
            </summary>
            <summary>
            Collection of distance calculation algorithms
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointLine(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Line2)">
            <summary>
            Returns a distance to the closest point on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a distance to the closest point on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointRay(UnityEngine.Vector2,UnityEngine.Ray2D)">
            <summary>
            Returns a distance to the closest point on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a distance to the closest point on the ray
            </summary>
            <param name="rayDirection">Normalized direction of the ray</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointSegment(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Returns a distance to the closest point on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a distance to the closest point on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointCircle(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Returns a distance to the closest point on the circle
            </summary>
            <returns>Positive value if the point is outside, negative otherwise</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointCircle(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a distance to the closest point on the circle
            </summary>
            <returns>Positive value if the point is outside, negative otherwise</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineLine(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Line2)">
            <summary>
            Returns the distance between the closest points on the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the distance between the closest points on the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineRay(MixedRealityExtension.ProceduralToolkit.Line2,UnityEngine.Ray2D)">
            <summary>
            Returns the distance between the closest points on the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the distance between the closest points on the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineSegment(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Returns the distance between the closest points on the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the distance between the closest points on the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineCircle(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Returns the distance between the closest points on the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns the distance between the closest points on the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RayRay(UnityEngine.Ray2D,UnityEngine.Ray2D)">
            <summary>
            Returns the distance between the closest points on the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RayRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the distance between the closest points on the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RaySegment(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Returns the distance between the closest points on the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RaySegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the distance between the closest points on the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RayCircle(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Returns the distance between the closest points on the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RayCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns the distance between the closest points on the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SegmentSegment(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Returns the distance between the closest points on the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SegmentSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the distance between the closest points on the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SegmentCircle(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Returns the distance between the closest points on the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SegmentCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns the distance between the closest points on the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.CircleCircle(MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Returns the distance between the closest points on the circles
            </summary>
            <returns>
            Positive value if the circles do not intersect, negative otherwise.
            Negative value can be interpreted as depth of penetration.
            </returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.CircleCircle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns the distance between the closest points on the circles
            </summary>
            <returns>
            Positive value if the circles do not intersect, negative otherwise.
            Negative value can be interpreted as depth of penetration.
            </returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointLine(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Line3)">
            <summary>
            Returns a distance to the closest point on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns a distance to the closest point on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointRay(UnityEngine.Vector3,UnityEngine.Ray)">
            <summary>
            Returns a distance to the closest point on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns a distance to the closest point on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointSegment(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Segment3)">
            <summary>
            Returns a distance to the closest point on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns a distance to the closest point on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointSphere(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Returns a distance to the closest point on the sphere
            </summary>
            <returns>Positive value if the point is outside, negative otherwise</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.PointSphere(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a distance to the closest point on the sphere
            </summary>
            <returns>Positive value if the point is outside, negative otherwise</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineSphere(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Returns the distance between the closest points on the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.LineSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns the distance between the closest points on the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RaySphere(UnityEngine.Ray,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Returns the distance between the closest points on the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.RaySphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns the distance between the closest points on the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SegmentSphere(MixedRealityExtension.ProceduralToolkit.Segment3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Returns the distance between the closest points on the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SegmentSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns the distance between the closest points on the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SphereSphere(MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Returns the distance between the closest points on the spheres
            </summary>
            <returns>
            Positive value if the spheres do not intersect, negative otherwise.
            Negative value can be interpreted as depth of penetration.
            </returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Distance.SphereSphere(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns the distance between the closest points on the spheres
            </summary>
            <returns>
            Positive value if the spheres do not intersect, negative otherwise.
            Negative value can be interpreted as depth of penetration.
            </returns>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Geometry">
            <summary>
            Utility class for computational geometry algorithms
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.Geometry.Epsilon">
            <summary>
            A tiny floating point value used in comparisons
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnCircle2(System.Single,System.Single)">
            <summary>
            Returns a point on a circle in the XY plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="angle">Angle in degrees</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsOnCircle2(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points on a circle in the XY plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsInCircle2(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points inside a circle in the XY plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnCircle3XY(System.Single,System.Single)">
            <summary>
            Returns a point on a circle in the XY plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="angle">Angle in degrees</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsOnCircle3XY(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points on a circle in the XY plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsInCircle3XY(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points inside a circle in the XY plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnCircle3XZ(System.Single,System.Single)">
            <summary>
            Returns a point on a circle in the XZ plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="angle">Angle in degrees</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsOnCircle3XZ(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points on a circle in the XZ plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsInCircle3XZ(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points inside a circle in the XZ plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnCircle3YZ(System.Single,System.Single)">
            <summary>
            Returns a point on a circle in the YZ plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="angle">Angle in degrees</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsOnCircle3YZ(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points on a circle in the YZ plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsInCircle3YZ(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points inside a circle in the YZ plane
            </summary>
            <param name="radius">Circle radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnSphere(System.Single,System.Single,System.Single)">
            <summary>
            Returns a point on a sphere in geographic coordinate system
            </summary>
            <param name="radius">Sphere radius</param>
            <param name="horizontalAngle">Horizontal angle in degrees [0, 360]</param>
            <param name="verticalAngle">Vertical angle in degrees [-90, 90]</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnSpheroid(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a point on a spheroid in geographic coordinate system
            </summary>
            <param name="radius">Spheroid radius</param>
            <param name="height">Spheroid height</param>
            <param name="horizontalAngle">Horizontal angle in degrees [0, 360]</param>
            <param name="verticalAngle">Vertical angle in degrees [-90, 90]</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointOnTeardrop(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns a point on a teardrop surface in geographic coordinate system
            </summary>
            <param name="radius">Teardrop radius</param>
            <param name="height">Teardrop height</param>
            <param name="horizontalAngle">Horizontal angle in degrees [0, 360]</param>
            <param name="verticalAngle">Vertical angle in degrees [-90, 90]</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.PointsOnSphere(System.Single,System.Int32)">
            <summary>
            Returns a list of evenly distributed points on a sphere
            </summary>
            <param name="radius">Sphere radius</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.Polygon2(System.Int32,System.Single)">
            <summary>
            Returns a list of points representing a polygon in the XY plane
            </summary>
            <param name="radius">Radius of the circle passing through the vertices</param>
            <param name="vertices">Number of polygon vertices</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.StarPolygon2(System.Int32,System.Single,System.Single)">
            <summary>
            Returns a list of points representing a star polygon in the XY plane
            </summary>
            <param name="innerRadius">Radius of the circle passing through the outer vertices</param>
            <param name="outerRadius">Radius of the circle passing through the inner vertices</param>
            <param name="vertices">Number of polygon vertices</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.GetAngle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the value of an angle. Assumes clockwise order of the polygon.
            </summary>
            <param name="previous">Previous vertex</param>
            <param name="current">Current vertex</param>
            <param name="next">Next vertex</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.GetAngleBisector(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single@)">
            <summary>
            Returns the bisector of an angle. Assumes clockwise order of the polygon.
            </summary>
            <param name="previous">Previous vertex</param>
            <param name="current">Current vertex</param>
            <param name="next">Next vertex</param>
            <param name="degrees">Value of the angle in degrees. Always positive.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.OffsetPolygon(System.Collections.Generic.IList{UnityEngine.Vector2},System.Single)">
            <summary>
            Creates a new offset polygon from the input polygon. Assumes clockwise order of the polygon.
            Does not handle intersections.
            </summary>
            <param name="polygon">Vertices of the polygon in clockwise order.</param>
            <param name="distance">Offset distance. Positive values offset outside, negative inside.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.OffsetPolygon(System.Collections.Generic.List{UnityEngine.Vector2}@,System.Single)">
            <summary>
            Offsets the input polygon. Assumes clockwise order of the polygon.
            Does not handle intersections.
            </summary>
            <param name="polygon">Vertices of the polygon in clockwise order.</param>
            <param name="distance">Offset distance. Positive values offset outside, negative inside.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.OffsetPolygon(UnityEngine.Vector2[]@,System.Single)">
            <summary>
            Offsets the input polygon. Assumes clockwise order of the polygon.
            Does not handle intersections.
            </summary>
            <param name="polygon">Vertices of the polygon in clockwise order.</param>
            <param name="distance">Offset distance. Positive values offset outside, negative inside.</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.GetRect(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Calculates a bounding rect for a set of vertices.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.GetCircumradius(UnityEngine.Rect)">
            <summary>
            Calculates a circumradius for a rectangle.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Geometry.GetCircumradius(System.Single,System.Single)">
            <summary>
            Calculates a circumradius for a rectangle.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Intersect">
            <summary>
            Collection of intersection algorithms
            </summary>
            <summary>
            Collection of intersection algorithms
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointLine(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Line2)">
            <summary>
            Tests if the point lies on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointLine(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Line2,System.Int32@)">
            <summary>
            Tests if the point lies on the line
            </summary>
            <param name="side">
            -1 if the point is to the left of the line,
            0 if it is on the line,
            1 if it is to the right of the line
            </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Tests if the point lies on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32@)">
            <summary>
            Tests if the point lies on the line
            </summary>
            <param name="side">
            -1 if the point is to the left of the line,
            0 if it is on the line,
            1 if it is to the right of the line
            </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointRay(UnityEngine.Vector2,UnityEngine.Ray2D)">
            <summary>
            Tests if the point lies on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointRay(UnityEngine.Vector2,UnityEngine.Ray2D,System.Int32@)">
            <summary>
            Tests if the point lies on the ray
            </summary>
            <param name="side">
            -1 if the point is to the left of the ray,
            0 if it is on the line,
            1 if it is to the right of the ray
            </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Tests if the point lies on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32@)">
            <summary>
            Tests if the point lies on the ray
            </summary>
            <param name="side">
            -1 if the point is to the left of the ray,
            0 if it is on the line,
            1 if it is to the right of the ray
            </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSegment(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Tests if the point lies on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSegment(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Segment2,System.Int32@)">
            <summary>
            Tests if the point lies on the segment
            </summary>
            <param name="side">
            -1 if the point is to the left of the segment,
            0 if it is on the line,
            1 if it is to the right of the segment
            </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Tests if the point lies on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Int32@)">
            <summary>
            Tests if the point lies on the segment
            </summary>
            <param name="side">
            -1 if the point is to the left of the segment,
            0 if it is on the line,
            1 if it is to the right of the segment
            </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointCircle(UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Tests if the point is inside the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointCircle(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Tests if the point is inside the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Line2)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.IntersectionLineLine2@)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.IntersectionLineLine2@)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineRay(MixedRealityExtension.ProceduralToolkit.Line2,UnityEngine.Ray2D)">
            <summary>
            Computes an intersection of the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineRay(MixedRealityExtension.ProceduralToolkit.Line2,UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.IntersectionLineRay2@)">
            <summary>
            Computes an intersection of the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes an intersection of the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.IntersectionLineRay2@)">
            <summary>
            Computes an intersection of the line and the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSegment(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Computes an intersection of the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSegment(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.IntersectionLineSegment2@)">
            <summary>
            Computes an intersection of the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes an intersection of the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.IntersectionLineSegment2@)">
            <summary>
            Computes an intersection of the line and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineCircle(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Computes an intersection of the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineCircle(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.IntersectionLineCircle@)">
            <summary>
            Computes an intersection of the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Computes an intersection of the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionLineCircle@)">
            <summary>
            Computes an intersection of the line and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayRay(UnityEngine.Ray2D,UnityEngine.Ray2D)">
            <summary>
            Computes an intersection of the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayRay(UnityEngine.Ray2D,UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.IntersectionRayRay2@)">
            <summary>
            Computes an intersection of the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes an intersection of the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayRay(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.IntersectionRayRay2@)">
            <summary>
            Computes an intersection of the rays
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySegment(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Computes an intersection of the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySegment(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.IntersectionRaySegment2@)">
            <summary>
            Computes an intersection of the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes an intersection of the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.IntersectionRaySegment2@)">
            <summary>
            Computes an intersection of the ray and the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayCircle(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Computes an intersection of the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayCircle(UnityEngine.Ray2D,MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.IntersectionRayCircle@)">
            <summary>
            Computes an intersection of the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Computes an intersection of the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RayCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionRayCircle@)">
            <summary>
            Computes an intersection of the ray and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSegment(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Segment2)">
            <summary>
            Computes an intersection of the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSegment(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.IntersectionSegmentSegment2@)">
            <summary>
            Computes an intersection of the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes an intersection of the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,MixedRealityExtension.ProceduralToolkit.IntersectionSegmentSegment2@)">
            <summary>
            Computes an intersection of the segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentCircle(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Computes an intersection of the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentCircle(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.IntersectionSegmentCircle@)">
            <summary>
            Computes an intersection of the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Computes an intersection of the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentCircle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionSegmentCircle@)">
            <summary>
            Computes an intersection of the segment and the circle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.CircleCircle(MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.Circle2)">
            <summary>
            Computes an intersection of the circles
            </summary>
            <returns>True if the circles intersect or one circle is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.CircleCircle(MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.Circle2,MixedRealityExtension.ProceduralToolkit.IntersectionCircleCircle@)">
            <summary>
            Computes an intersection of the circles
            </summary>
            <returns>True if the circles intersect or one circle is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.CircleCircle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single)">
            <summary>
            Computes an intersection of the circles
            </summary>
            <returns>True if the circles intersect or one circle is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.CircleCircle(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionCircleCircle@)">
            <summary>
            Computes an intersection of the circles
            </summary>
            <returns>True if the circles intersect or one circle is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointLine(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Line3)">
            <summary>
            Tests if the point lies on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Tests if the point lies on the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointRay(UnityEngine.Vector3,UnityEngine.Ray)">
            <summary>
            Tests if the point lies on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Tests if the point lies on the ray
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSegment(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Segment3)">
            <summary>
            Tests if the point lies on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSegment(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Tests if the point lies on the segment
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSphere(UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Tests if the point is inside the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.PointSphere(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Tests if the point is inside the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Line3)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Line3,UnityEngine.Vector3@)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            Computes an intersection of the lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSphere(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Computes an intersection of the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSphere(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.IntersectionLineSphere@)">
            <summary>
            Computes an intersection of the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Computes an intersection of the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.LineSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionLineSphere@)">
            <summary>
            Computes an intersection of the line and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySphere(UnityEngine.Ray,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Computes an intersection of the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySphere(UnityEngine.Ray,MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.IntersectionRaySphere@)">
            <summary>
            Computes an intersection of the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Computes an intersection of the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.RaySphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionRaySphere@)">
            <summary>
            Computes an intersection of the ray and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSphere(MixedRealityExtension.ProceduralToolkit.Segment3,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Computes an intersection of the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSphere(MixedRealityExtension.ProceduralToolkit.Segment3,MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.IntersectionSegmentSphere@)">
            <summary>
            Computes an intersection of the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Computes an intersection of the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SegmentSphere(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionSegmentSphere@)">
            <summary>
            Computes an intersection of the segment and the sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SphereSphere(MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.Sphere)">
            <summary>
            Computes an intersection of the spheres
            </summary>
            <returns>True if the spheres intersect or one sphere is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SphereSphere(MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.IntersectionSphereSphere@)">
            <summary>
            Computes an intersection of the spheres
            </summary>
            <returns>True if the spheres intersect or one sphere is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SphereSphere(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
            <summary>
            Computes an intersection of the spheres
            </summary>
            <returns>True if the spheres intersect or one sphere is contained within the other</returns>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Intersect.SphereSphere(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,MixedRealityExtension.ProceduralToolkit.IntersectionSphereSphere@)">
            <summary>
            Computes an intersection of the spheres
            </summary>
            <returns>True if the spheres intersect or one sphere is contained within the other</returns>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Line2">
            <summary>
            Representation of a 2D line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Line2.GetPoint(System.Single)">
            <summary>
            Returns a point at <paramref name="distance"/> units from origin along the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Line2.Lerp(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Line2,System.Single)">
            <summary>
            Linearly interpolates between two lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Line2.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Line2,MixedRealityExtension.ProceduralToolkit.Line2,System.Single)">
            <summary>
            Linearly interpolates between two lines without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Line3">
            <summary>
            Representation of a 3D line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Line3.GetPoint(System.Single)">
            <summary>
            Returns a point at <paramref name="distance"/> units from origin along the line
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Line3.Lerp(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Line3,System.Single)">
            <summary>
            Linearly interpolates between two lines
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Line3.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Line3,MixedRealityExtension.ProceduralToolkit.Line3,System.Single)">
            <summary>
            Linearly interpolates between two lines without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Segment2">
            <summary>
            Representation of a 2D line segment
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.Segment2.direction">
            <summary>
            Returns the normalized direction of the segment
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.Segment2.length">
            <summary>
            Returns the length of the segment
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.Segment2.Item(System.Int32)">
            <summary>
            Access the a or b component using [0] or [1] respectively
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Segment2.GetPoint(System.Single)">
            <summary>
            Returns a point on the segment at the given normalized position
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Segment2.Lerp(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Segment2,System.Single)">
            <summary>
            Linearly interpolates between two segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Segment2.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Segment2,MixedRealityExtension.ProceduralToolkit.Segment2,System.Single)">
            <summary>
            Linearly interpolates between two segments without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Segment3">
            <summary>
            Representation of a 3D line segment
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.Segment3.direction">
            <summary>
            Returns the normalized direction of the segment
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.Segment3.length">
            <summary>
            Returns the length of the segment
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.Segment3.Item(System.Int32)">
            <summary>
            Access the a or b component using [0] or [1] respectively
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Segment3.GetPoint(System.Single)">
            <summary>
            Returns a point on the segment at the given normalized position
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Segment3.Lerp(MixedRealityExtension.ProceduralToolkit.Segment3,MixedRealityExtension.ProceduralToolkit.Segment3,System.Single)">
            <summary>
            Linearly interpolates between two segments
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Segment3.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Segment3,MixedRealityExtension.ProceduralToolkit.Segment3,System.Single)">
            <summary>
            Linearly interpolates between two segments without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Sphere">
            <summary>
            Representation of a sphere
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Sphere.GetPoint(System.Single,System.Single)">
            <summary>
            Returns a point on the sphere at the given coordinates
            </summary>
            <param name="horizontalAngle">Horizontal angle in degrees [0, 360]</param>
            <param name="verticalAngle">Vertical angle in degrees [-90, 90]</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Sphere.Lerp(MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.Sphere,System.Single)">
            <summary>
            Linearly interpolates between two spheres
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.Sphere.LerpUnclamped(MixedRealityExtension.ProceduralToolkit.Sphere,MixedRealityExtension.ProceduralToolkit.Sphere,System.Single)">
            <summary>
            Linearly interpolates between two spheres without clamping the interpolant
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Skeleton.Plan">
            <summary>
            Representation of the active plan during generation process
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Skeleton.StraightSkeleton">
            <summary>
            A straight skeleton representation
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.Skeleton.StraightSkeletonGenerator">
            <summary>
            A straight skeleton generator, computes a straight skeleton for the input polygon, reusable. 
            The generation algorithm is loosely based on the work of Tom Kelly
            (2014) "Unwritten procedural modeling with the straight skeleton"
            http://www.twak.co.uk/2014/02/unwritten-procedural-modeling-with.html
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.MeshDraft">
            <summary>
            Helper class for procedural mesh generation
            </summary>
            <summary>
            Helper class for procedural mesh generation
            </summary>
        </member>
        <member name="P:MixedRealityExtension.ProceduralToolkit.MeshDraft.vertexCount">
            <summary>
            Shortcut for vertices.Count
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.#ctor">
            <summary>
            Creates an empty MeshDraft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.#ctor(UnityEngine.Mesh)">
            <summary>
            Creates a new MeshDraft with vertex data from the <paramref name="mesh"/>>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Add(MixedRealityExtension.ProceduralToolkit.MeshDraft)">
            <summary>
            Adds vertex data from the <paramref name="draft"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Adds a triangle to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Adds a triangle to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Adds a triangle to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a triangle to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a triangle to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a triangle to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddQuad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds a quad to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleFan(System.Collections.Generic.IList{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Adds a triangle fan to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_fan
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleFan(System.Collections.Generic.IList{UnityEngine.Vector3},UnityEngine.Vector3,System.Boolean)">
            <summary>
            Adds a triangle fan to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_fan
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleFan(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Adds a triangle fan to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_fan
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleFan(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector2},System.Boolean)">
            <summary>
            Adds a triangle fan to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_fan
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleFan(System.Collections.Generic.IList{UnityEngine.Vector3},UnityEngine.Vector3,System.Collections.Generic.IList{UnityEngine.Vector2},System.Boolean)">
            <summary>
            Adds a triangle fan to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_fan
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleFan(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector2},System.Boolean)">
            <summary>
            Adds a triangle fan to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_fan
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleStrip(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Adds a triangle strip to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_strip
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleStrip(System.Collections.Generic.IList{UnityEngine.Vector3},UnityEngine.Vector3)">
            <summary>
            Adds a triangle strip to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_strip
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleStrip(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            Adds a triangle strip to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_strip
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleStrip(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Adds a triangle strip to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_strip
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleStrip(System.Collections.Generic.IList{UnityEngine.Vector3},UnityEngine.Vector3,System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Adds a triangle strip to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_strip
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddTriangleStrip(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            Adds a triangle strip to the draft
            </summary>
            <remarks>
            https://en.wikipedia.org/wiki/Triangle_strip
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddBaselessPyramid(UnityEngine.Vector3,System.Collections.Generic.IList{UnityEngine.Vector3},System.Boolean,System.Boolean)">
            <summary>
            Adds a baseless pyramid to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddFlatTriangleBand(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Adds a band made from triangles to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.AddFlatQuadBand(System.Collections.Generic.IList{UnityEngine.Vector3},System.Collections.Generic.IList{UnityEngine.Vector3},System.Boolean)">
            <summary>
            Adds a band made from quads to the draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Clear">
            <summary>
            Clears all vertex data and all triangle indices
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Move(UnityEngine.Vector3)">
            <summary>
            Moves draft vertices by <paramref name="vector"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Rotate(UnityEngine.Quaternion)">
            <summary>
            Rotates draft vertices by <paramref name="rotation"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Scale(System.Single)">
            <summary>
            Scales draft vertices uniformly by <paramref name="scale"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Scale(UnityEngine.Vector3)">
            <summary>
            Scales draft vertices non-uniformly by <paramref name="scale"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Paint(UnityEngine.Color)">
            <summary>
            Paints draft vertices with <paramref name="color"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlipFaces">
            <summary>
            Flips draft faces
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlipTriangles">
            <summary>
            Reverses the winding order of draft triangles
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlipNormals">
            <summary>
            Reverses the direction of draft normals
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlipUVHorizontally(System.Int32)">
            <summary>
            Flips the UV map horizontally in the selected <paramref name="channel"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlipUVVertically(System.Int32)">
            <summary>
            Flips the UV map vertically in the selected <paramref name="channel"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Spherify(System.Single,UnityEngine.Vector3)">
            <summary>
            Projects vertices on a sphere with the given <paramref name="radius"/> and <paramref name="center"/>, recalculates normals
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.ToMesh(System.Boolean,System.Boolean)">
            <summary>
            Creates a new mesh from the data in the draft
            </summary>
            <param name="calculateBounds"> Calculate the bounding box of the Mesh after setting the triangles. </param>
            <param name="autoIndexFormat"> Use 16 bit or 32 bit index buffers based on vertex count. </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.ToMesh(UnityEngine.Mesh@,System.Boolean,System.Boolean)">
            <summary>
            Fills the <paramref name="mesh"/> with the data in the draft
            </summary>
            <param name="mesh"> Resulting mesh. Cleared before use. </param>
            <param name="calculateBounds"> Calculate the bounding box of the Mesh after setting the triangles. </param>
            <param name="autoIndexFormat"> Use 16 bit or 32 bit index buffers based on vertex count. </param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Tetrahedron(System.Single,System.Boolean)">
            <summary>
            Constructs a tetrahedron draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Cube(System.Single,System.Boolean)">
            <summary>
            Constructs a cube draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Hexahedron(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Constructs a hexahedron draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Hexahedron(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Constructs a hexahedron draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Octahedron(System.Single,System.Boolean)">
            <summary>
            Constructs a octahedron draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Dodecahedron(System.Single)">
            <summary>
            Constructs a dodecahedron draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Icosahedron(System.Single,System.Boolean)">
            <summary>
            Constructs a icosahedron draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Constructs a quad draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Quad(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)">
            <summary>
            Constructs a quad draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Plane(System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a plane draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Pyramid(System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Constructs a pyramid draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.BiPyramid(System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Constructs a bipyramid draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Prism(System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Constructs a prism draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Cylinder(System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Constructs a cylinder draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlatSphere(System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a flat sphere draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlatSpheroid(System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a flat spheroid draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlatTeardrop(System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a flat teardrop draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.FlatRevolutionSurface(System.Func{System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector3},System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a flat revolution surface draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Sphere(System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a sphere draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Spheroid(System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a spheroid draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Teardrop(System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a teardrop draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.RevolutionSurface(System.Func{System.Single,System.Single,System.Single,System.Single,UnityEngine.Vector3},System.Single,System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructs a revolution surface draft
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.PartialBox(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,MixedRealityExtension.ProceduralToolkit.Directions,System.Boolean)">
            <summary>
            Constructs a partial box with specified faces
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.MeshDraft.Capsule(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Constructs a capsule draft
            </summary>
            <param name="height">The height of the capsule, not including the end caps</param>
            <param name="radius">The radius of the capsule</param>
            <param name="segments">The number of radial segments. Defaults to 12</param>
            <param name="rings">The number of end-cap rings. Defaults to 8</param>
            <returns></returns>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.PTUtils">
            <summary>
            Various useful methods and constants
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.LowercaseLetters">
            <summary>
            Lowercase letters from a to z
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.UppercaseLetters">
            <summary>
            Uppercase letters from A to Z
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Digits">
            <summary>
            Digits from 0 to 9
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Letters">
            <summary>
            The concatenation of the strings <see cref="F:MixedRealityExtension.ProceduralToolkit.PTUtils.LowercaseLetters"/> and <see cref="F:MixedRealityExtension.ProceduralToolkit.PTUtils.UppercaseLetters"/>
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Alphanumerics">
            <summary>
            The concatenation of the strings <see cref="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Letters"/> and <see cref="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Digits"/>
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Sqrt05">
            <summary>
            Square root of 0.5
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Sqrt2">
            <summary>
            Square root of 2
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.Sqrt5">
            <summary>
            Square root of 5
            </summary>
        </member>
        <member name="F:MixedRealityExtension.ProceduralToolkit.PTUtils.GoldenAngle">
            <summary>
            Golden angle in radians
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.PTUtils.Swap``1(``0@,``0@)">
            <summary>
            Swaps values of <paramref name="left"/> and <paramref name="right"/>
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.PTUtils.Knapsack``1(System.Collections.Generic.Dictionary{``0,System.Single},System.Single,System.Collections.Generic.Dictionary{``0,System.Int32})">
            <summary>
            Knapsack problem solver for items with equal value
            </summary>
            <typeparam name="T">Item identificator</typeparam>
            <param name="set">
            Set of items where key <typeparamref name="T"/> is item identificator and value is item weight</param>
            <param name="capacity">Maximum weight</param>
            <param name="knapsack">Pre-filled knapsack</param>
            <returns>
            Filled knapsack where values are number of items of type key.
            Tends to overload knapsack: fills remainder with one smallest item.</returns>
            <remarks>
            https://en.wikipedia.org/wiki/Knapsack_problem
            </remarks>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.RendererProperties">
            <summary>
            Serializable Renderer properties
            </summary>
        </member>
        <member name="T:MixedRealityExtension.ProceduralToolkit.VectorE">
            <summary>
            Vector extensions
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector2X(UnityEngine.Vector2)">
            <summary>
            Returns a new vector with zero Y component
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector2Y(UnityEngine.Vector2)">
            <summary>
            Returns a new vector with zero X component
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3XY(UnityEngine.Vector2)">
            <summary>
            Projects the vector onto the three dimensional XY plane
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3XZ(UnityEngine.Vector2)">
            <summary>
            Projects the vector onto the three dimensional XZ plane
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3YZ(UnityEngine.Vector2)">
            <summary>
            Projects the vector onto the three dimensional YZ plane
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.IsCollinear(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns true if vectors lie on the same line, false otherwise
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.Perp(UnityEngine.Vector2)">
            <summary>
            Returns a new vector rotated counterclockwise by 90°
            </summary>
            <remarks>
            Hill, F. S. Jr. "The Pleasures of 'Perp Dot' Products."
            Ch. II.5 in Graphics Gems IV (Ed. P. S. Heckbert). San Diego: Academic Press, pp. 138-148, 1994
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.PerpDot(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a perp dot product of vectors
            </summary>
            <remarks>
            Hill, F. S. Jr. "The Pleasures of 'Perp Dot' Products."
            Ch. II.5 in Graphics Gems IV (Ed. P. S. Heckbert). San Diego: Academic Press, pp. 138-148, 1994
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.SignedAngle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a signed clockwise angle in degrees [-180, 180] between from and to
            </summary>
            <param name="from">The angle extends round from this vector</param>
            <param name="to">The angle extends round to this vector</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.Angle360(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a clockwise angle in degrees [0, 360] between from and to
            </summary>
            <param name="from">The angle extends round from this vector</param>
            <param name="to">The angle extends round to this vector</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.InverseLerp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.RotateCW(UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a new vector rotated clockwise by the specified angle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.RotateCCW(UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a new vector rotated counterclockwise by the specified angle
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.RotateCW45(UnityEngine.Vector2)">
            <summary>
            Returns a new vector rotated clockwise by 45°
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.RotateCCW45(UnityEngine.Vector2)">
            <summary>
            Returns a new vector rotated counterclockwise by 45°
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.RotateCW90(UnityEngine.Vector2)">
            <summary>
            Returns a new vector rotated clockwise by 90°
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.RotateCCW90(UnityEngine.Vector2)">
            <summary>
            Returns a new vector rotated counterclockwise by 90°
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.Perp(UnityEngine.Vector2Int)">
            <summary>
            Returns a perp of vector
            </summary>
            <remarks>
            Hill, F. S. Jr. "The Pleasures of 'Perp Dot' Products."
            Ch. II.5 in Graphics Gems IV (Ed. P. S. Heckbert). San Diego: Academic Press, pp. 138-148, 1994
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.PerpDot(UnityEngine.Vector2Int,UnityEngine.Vector2Int)">
            <summary>
            Returns a perp dot product of vectors
            </summary>
            <remarks>
            Hill, F. S. Jr. "The Pleasures of 'Perp Dot' Products."
            Ch. II.5 in Graphics Gems IV (Ed. P. S. Heckbert). San Diego: Academic Press, pp. 138-148, 1994
            </remarks>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3X(UnityEngine.Vector3)">
            <summary>
            Returns a new vector with zero Y and Z components
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3Y(UnityEngine.Vector3)">
            <summary>
            Returns a new vector with zero X and Z components
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3Z(UnityEngine.Vector3)">
            <summary>
            Returns a new vector with zero X and Y components
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3XY(UnityEngine.Vector3)">
            <summary>
            Returns a new vector with zero Z component
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3XZ(UnityEngine.Vector3)">
            <summary>
            Returns a new vector with zero Y component
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector3YZ(UnityEngine.Vector3)">
            <summary>
            Returns a new vector with zero X component
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector2XY(UnityEngine.Vector3)">
            <summary>
            Returns a new Vector2 made from X and Y components of this vector
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector2XZ(UnityEngine.Vector3)">
            <summary>
            Returns a new Vector2 made from X and Z components of this vector
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.ToVector2YZ(UnityEngine.Vector3)">
            <summary>
            Returns a new Vector2 made from Y and Z components of this vector
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.Angle360(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns an angle in degrees [0, 360] between from and to
            </summary>
            <param name="from">The angle extends round from this vector</param>
            <param name="to">The angle extends round to this vector</param>
            <param name="normal">Up direction of the clockwise axis</param>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.InverseLerp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            </summary>
        </member>
        <member name="M:MixedRealityExtension.ProceduralToolkit.VectorE.InverseLerp(UnityEngine.Vector4,UnityEngine.Vector4,UnityEngine.Vector4)">
            <summary>
            Calculates the linear parameter t that produces the interpolant value within the range [a, b].
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Util.CubicBezier">
            <summary>
            Calculates a value along a two-point bezier curve.
            Implementation based on this article:
            http://greweb.me/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/
            and https://github.com/gre/bezier-easing
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Util.CubicBezier.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a CubicBezier instance.
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:MixedRealityExtension.Util.CubicBezier.Sample(System.Single)">
            <summary>
            Calculate the value at the given point along the curve.
            </summary>
            <param name="val">The location at which to sample the curve. Must be in [0, 1] range.</param>
            <returns>The calculated value.</returns>
        </member>
        <member name="M:MixedRealityExtension.Util.Logging.ConsoleLogger.LogDebug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Util.Logging.ConsoleLogger.LogError(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Util.Logging.ConsoleLogger.LogWarning(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Util.Logging.UnityLogger.LogDebug(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Util.Logging.UnityLogger.LogError(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:MixedRealityExtension.Util.Logging.UnityLogger.LogWarning(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:MixedRealityExtension.Util.TransformLerper">
            <summary>
            A helper class useful for keeping a transform's position and rotation in sync with that of a transform on another computer.
            Idea is that the lerper would receive regular position and/or rotation updates, and would lerp between those updates so that
            the player sees smooth animation.
            </summary>
        </member>
        <member name="F:MixedRealityExtension.Util.TransformLerper.DefaultUpdatePeriod">
            <summary>
            Our default period is based off of the 10hz update cycle that we use for sending actor updates or corrections.
            We add in a variance to account for network lag to give the best tuned feel.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Util.TransformLerper.#ctor(UnityEngine.Transform)">
            <summary>
            Initializes and instance of class <see cref="T:MixedRealityExtension.Util.TransformLerper"/>
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:MixedRealityExtension.Util.TransformLerper.SetTarget(System.Nullable{UnityEngine.Vector3},System.Nullable{UnityEngine.Quaternion},System.Single)">
            <summary>
            Called to update the target of the lerper for its given transform..
            </summary>
            <param name="position">The optional new position.</param>
            <param name="rotation">The optional new rotation.</param>
            <param name="updatePeriod">the expected amount time in seconds, between updates. This is the
            time the lerper will take, starting from now, to reach the target position/rotation.</param>
        </member>
        <member name="M:MixedRealityExtension.Util.TransformLerper.ClearTarget">
            <summary>
            Clears the target position and/or rotation.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Util.TransformLerper.Update">
            <summary>
            Call this every frame.
            Updates the transform position/rotation by one frames-worth of lerping.
            </summary>
        </member>
        <member name="T:MixedRealityExtension.Util.UtilMethods">
            <summary>
            MRE Runtime Utilities
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.ConvertEnum``2(``1)">
            <summary>
            Converts an enum from one type to another based on matching strings for the possible values of the enums.
            </summary>
            <typeparam name="ReturnT">The enum type to be converted to.</typeparam>
            <typeparam name="SourceT">The enum type being converted from.</typeparam>
            <param name="source">The value of the enum being converted from.</param>
            <returns>The value of the enum that has been converted to.</returns>
            <example>
            enum Gender
            {
                Male,
                Female
            }
            
            enum Sex
            {
                Male,
                Female
            }
            
            var gen = Gender.Male;
            
            // Result will be the string matching of Gender.Male.ToString() and Sex.Male.ToString()
            Sex sex = UnityHelpers.ConvertEnum(gen);
            </example>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.IsNullableType(System.Type)">
            <summary>
            Returns true if the value is a Nullable type.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.GetActualType(System.Type)">
            <summary>
            If the given type is Nullable, return the underlying type. Otherwise return the original type.
            </summary>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.StringToGuid(System.String)">
            <summary>
            Generates a GUID from the provided string. Note the result is not a valid GUID (not compliant with RFC 4122), only shaped like a GUID (a reasonably unique 16-byte value).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.GetUrlParts(System.String,System.String@,System.String@)">
            <summary>
            Breaks the given url into a filename and everything else
            </summary>
            <param name="url">The base absolute URL</param>
            <param name="rootUrl">Everything preceding the final slash in the URL</param>
            <param name="filename">Everything after the final slash</param>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.GetOrCreate``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            A useful utility to transprently insert default values into a dictionary
            </summary>
            <typeparam name="K">The dictionary key type</typeparam>
            <typeparam name="V">The dictionary value type</typeparam>
            <param name="_this">The dictionary</param>
            <param name="key">The key whose value you want to get or create</param>
            <param name="creator">A function that returns a default value for insertion</param>
            <returns></returns>
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.TransformEulerAngleToRadian(System.Single)">
            helper function to transform an Euler angle to radian and also to take the shortest angle from 0
            the input is assumed to be within the interval [-360,360] (degree)
        </member>
        <member name="M:MixedRealityExtension.Util.UtilMethods.TransformEulerAnglesToRadians(UnityEngine.Vector3)">
            helper function to transform Euler angles to radians to also take the shortest rotational angle from 0
        </member>
    </members>
</doc>
